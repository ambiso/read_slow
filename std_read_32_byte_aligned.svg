<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="457"><g><title>[ld-linux-x86-64.so.2] (6 samples, 1.31%)</title><rect x="3.2823%" y="629" width="1.3129%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="6"/><text x="3.5323%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 1.09%)</title><rect x="3.5011%" y="613" width="1.0941%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="5"/><text x="3.7511%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.88%)</title><rect x="3.7199%" y="597" width="0.8753%" height="15" fill="rgb(221,193,54)" fg:x="17" fg:w="4"/><text x="3.9699%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.44%)</title><rect x="4.1575%" y="581" width="0.4376%" height="15" fill="rgb(248,212,6)" fg:x="19" fg:w="2"/><text x="4.4075%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.3764%" y="565" width="0.2188%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="1"/><text x="4.6264%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="629" width="0.2188%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="1"/><text x="4.8452%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="613" width="0.2188%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="1"/><text x="4.8452%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="597" width="0.2188%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="1"/><text x="4.8452%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="581" width="0.2188%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="1"/><text x="4.8452%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="565" width="0.2188%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="1"/><text x="4.8452%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="549" width="0.2188%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="1"/><text x="4.8452%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="533" width="0.2188%" height="15" fill="rgb(240,193,28)" fg:x="21" fg:w="1"/><text x="4.8452%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="517" width="0.2188%" height="15" fill="rgb(216,20,37)" fg:x="21" fg:w="1"/><text x="4.8452%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="501" width="0.2188%" height="15" fill="rgb(206,188,39)" fg:x="21" fg:w="1"/><text x="4.8452%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5952%" y="485" width="0.2188%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="1"/><text x="4.8452%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.44%)</title><rect x="4.8140%" y="549" width="0.4376%" height="15" fill="rgb(231,73,38)" fg:x="22" fg:w="2"/><text x="5.0640%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="4.8140%" y="533" width="0.4376%" height="15" fill="rgb(225,20,46)" fg:x="22" fg:w="2"/><text x="5.0640%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="4.8140%" y="517" width="0.4376%" height="15" fill="rgb(210,31,41)" fg:x="22" fg:w="2"/><text x="5.0640%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="4.8140%" y="501" width="0.4376%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="2"/><text x="5.0640%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="4.8140%" y="485" width="0.4376%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="2"/><text x="5.0640%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="4.8140%" y="469" width="0.4376%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="2"/><text x="5.0640%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="4.8140%" y="453" width="0.4376%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="2"/><text x="5.0640%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.0328%" y="437" width="0.2188%" height="15" fill="rgb(221,5,38)" fg:x="23" fg:w="1"/><text x="5.2828%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.0328%" y="421" width="0.2188%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="1"/><text x="5.2828%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.0328%" y="405" width="0.2188%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="1"/><text x="5.2828%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (17 samples, 3.72%)</title><rect x="1.7505%" y="645" width="3.7199%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="17"/><text x="2.0005%" y="655.50">[ld-..</text></g><g><title>_dl_catch_exception (3 samples, 0.66%)</title><rect x="4.8140%" y="629" width="0.6565%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="3"/><text x="5.0640%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.66%)</title><rect x="4.8140%" y="613" width="0.6565%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="3"/><text x="5.0640%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.66%)</title><rect x="4.8140%" y="597" width="0.6565%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="3"/><text x="5.0640%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.66%)</title><rect x="4.8140%" y="581" width="0.6565%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="3"/><text x="5.0640%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.66%)</title><rect x="4.8140%" y="565" width="0.6565%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="3"/><text x="5.0640%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.2516%" y="549" width="0.2188%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="1"/><text x="5.5016%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.2516%" y="533" width="0.2188%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="1"/><text x="5.5016%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.2516%" y="517" width="0.2188%" height="15" fill="rgb(254,191,54)" fg:x="24" fg:w="1"/><text x="5.5016%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.2516%" y="501" width="0.2188%" height="15" fill="rgb(241,83,37)" fg:x="24" fg:w="1"/><text x="5.5016%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.2516%" y="485" width="0.2188%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="1"/><text x="5.5016%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.2516%" y="469" width="0.2188%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="1"/><text x="5.5016%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.2516%" y="453" width="0.2188%" height="15" fill="rgb(245,192,40)" fg:x="24" fg:w="1"/><text x="5.5016%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (29 samples, 6.35%)</title><rect x="0.0000%" y="661" width="6.3457%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="29"/><text x="0.2500%" y="671.50">[ld-linu..</text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="5.4705%" y="645" width="0.8753%" height="15" fill="rgb(232,182,51)" fg:x="25" fg:w="4"/><text x="5.7205%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.66%)</title><rect x="5.6893%" y="629" width="0.6565%" height="15" fill="rgb(231,60,39)" fg:x="26" fg:w="3"/><text x="5.9393%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.66%)</title><rect x="5.6893%" y="613" width="0.6565%" height="15" fill="rgb(208,69,12)" fg:x="26" fg:w="3"/><text x="5.9393%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.66%)</title><rect x="5.6893%" y="597" width="0.6565%" height="15" fill="rgb(235,93,37)" fg:x="26" fg:w="3"/><text x="5.9393%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="5.9081%" y="581" width="0.4376%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="2"/><text x="6.1581%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.1269%" y="565" width="0.2188%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="1"/><text x="6.3769%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.1269%" y="549" width="0.2188%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="1"/><text x="6.3769%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (30 samples, 6.56%)</title><rect x="0.0000%" y="677" width="6.5646%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="30"/><text x="0.2500%" y="687.50">[ld-linux..</text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="661" width="0.2188%" height="15" fill="rgb(250,191,14)" fg:x="29" fg:w="1"/><text x="6.5957%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="645" width="0.2188%" height="15" fill="rgb(239,60,40)" fg:x="29" fg:w="1"/><text x="6.5957%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="629" width="0.2188%" height="15" fill="rgb(206,27,48)" fg:x="29" fg:w="1"/><text x="6.5957%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="613" width="0.2188%" height="15" fill="rgb(225,35,8)" fg:x="29" fg:w="1"/><text x="6.5957%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="597" width="0.2188%" height="15" fill="rgb(250,213,24)" fg:x="29" fg:w="1"/><text x="6.5957%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="581" width="0.2188%" height="15" fill="rgb(247,123,22)" fg:x="29" fg:w="1"/><text x="6.5957%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="565" width="0.2188%" height="15" fill="rgb(231,138,38)" fg:x="29" fg:w="1"/><text x="6.5957%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="549" width="0.2188%" height="15" fill="rgb(231,145,46)" fg:x="29" fg:w="1"/><text x="6.5957%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.3457%" y="533" width="0.2188%" height="15" fill="rgb(251,118,11)" fg:x="29" fg:w="1"/><text x="6.5957%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (34 samples, 7.44%)</title><rect x="0.0000%" y="693" width="7.4398%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="34"/><text x="0.2500%" y="703.50">[ld-linux-..</text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="677" width="0.8753%" height="15" fill="rgb(247,81,37)" fg:x="30" fg:w="4"/><text x="6.8146%" y="687.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="661" width="0.8753%" height="15" fill="rgb(209,12,38)" fg:x="30" fg:w="4"/><text x="6.8146%" y="671.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="645" width="0.8753%" height="15" fill="rgb(227,1,9)" fg:x="30" fg:w="4"/><text x="6.8146%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="629" width="0.8753%" height="15" fill="rgb(248,47,43)" fg:x="30" fg:w="4"/><text x="6.8146%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="613" width="0.8753%" height="15" fill="rgb(221,10,30)" fg:x="30" fg:w="4"/><text x="6.8146%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="597" width="0.8753%" height="15" fill="rgb(210,229,1)" fg:x="30" fg:w="4"/><text x="6.8146%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="581" width="0.8753%" height="15" fill="rgb(222,148,37)" fg:x="30" fg:w="4"/><text x="6.8146%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="565" width="0.8753%" height="15" fill="rgb(234,67,33)" fg:x="30" fg:w="4"/><text x="6.8146%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="549" width="0.8753%" height="15" fill="rgb(247,98,35)" fg:x="30" fg:w="4"/><text x="6.8146%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="6.5646%" y="533" width="0.8753%" height="15" fill="rgb(247,138,52)" fg:x="30" fg:w="4"/><text x="6.8146%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.66%)</title><rect x="6.7834%" y="517" width="0.6565%" height="15" fill="rgb(213,79,30)" fg:x="31" fg:w="3"/><text x="7.0334%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (35 samples, 7.66%)</title><rect x="0.0000%" y="709" width="7.6586%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="35"/><text x="0.2500%" y="719.50">[ld-linux-..</text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.4398%" y="693" width="0.2188%" height="15" fill="rgb(230,62,27)" fg:x="34" fg:w="1"/><text x="7.6898%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.4398%" y="677" width="0.2188%" height="15" fill="rgb(216,154,8)" fg:x="34" fg:w="1"/><text x="7.6898%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.4398%" y="661" width="0.2188%" height="15" fill="rgb(244,35,45)" fg:x="34" fg:w="1"/><text x="7.6898%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.4398%" y="645" width="0.2188%" height="15" fill="rgb(251,115,12)" fg:x="34" fg:w="1"/><text x="7.6898%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.4398%" y="629" width="0.2188%" height="15" fill="rgb(240,54,50)" fg:x="34" fg:w="1"/><text x="7.6898%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.4398%" y="613" width="0.2188%" height="15" fill="rgb(233,84,52)" fg:x="34" fg:w="1"/><text x="7.6898%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.4398%" y="597" width="0.2188%" height="15" fill="rgb(207,117,47)" fg:x="34" fg:w="1"/><text x="7.6898%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.4398%" y="581" width="0.2188%" height="15" fill="rgb(249,43,39)" fg:x="34" fg:w="1"/><text x="7.6898%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.6586%" y="709" width="0.2188%" height="15" fill="rgb(209,38,44)" fg:x="35" fg:w="1"/><text x="7.9086%" y="719.50"></text></g><g><title>exit (3 samples, 0.66%)</title><rect x="7.8775%" y="661" width="0.6565%" height="15" fill="rgb(236,212,23)" fg:x="36" fg:w="3"/><text x="8.1275%" y="671.50"></text></g><g><title>[libc.so.6] (3 samples, 0.66%)</title><rect x="7.8775%" y="645" width="0.6565%" height="15" fill="rgb(242,79,21)" fg:x="36" fg:w="3"/><text x="8.1275%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.44%)</title><rect x="8.0963%" y="629" width="0.4376%" height="15" fill="rgb(211,96,35)" fg:x="37" fg:w="2"/><text x="8.3463%" y="639.50"></text></g><g><title>pthread_mutex_unlock (2 samples, 0.44%)</title><rect x="8.0963%" y="613" width="0.4376%" height="15" fill="rgb(253,215,40)" fg:x="37" fg:w="2"/><text x="8.3463%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.3151%" y="597" width="0.2188%" height="15" fill="rgb(211,81,21)" fg:x="38" fg:w="1"/><text x="8.5651%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="645" width="0.2188%" height="15" fill="rgb(208,190,38)" fg:x="39" fg:w="1"/><text x="8.7839%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="629" width="0.2188%" height="15" fill="rgb(235,213,38)" fg:x="39" fg:w="1"/><text x="8.7839%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="613" width="0.2188%" height="15" fill="rgb(237,122,38)" fg:x="39" fg:w="1"/><text x="8.7839%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="597" width="0.2188%" height="15" fill="rgb(244,218,35)" fg:x="39" fg:w="1"/><text x="8.7839%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="581" width="0.2188%" height="15" fill="rgb(240,68,47)" fg:x="39" fg:w="1"/><text x="8.7839%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="565" width="0.2188%" height="15" fill="rgb(210,16,53)" fg:x="39" fg:w="1"/><text x="8.7839%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="549" width="0.2188%" height="15" fill="rgb(235,124,12)" fg:x="39" fg:w="1"/><text x="8.7839%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="533" width="0.2188%" height="15" fill="rgb(224,169,11)" fg:x="39" fg:w="1"/><text x="8.7839%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="517" width="0.2188%" height="15" fill="rgb(250,166,2)" fg:x="39" fg:w="1"/><text x="8.7839%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="501" width="0.2188%" height="15" fill="rgb(242,216,29)" fg:x="39" fg:w="1"/><text x="8.7839%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="485" width="0.2188%" height="15" fill="rgb(230,116,27)" fg:x="39" fg:w="1"/><text x="8.7839%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.5339%" y="469" width="0.2188%" height="15" fill="rgb(228,99,48)" fg:x="39" fg:w="1"/><text x="8.7839%" y="479.50"></text></g><g><title>__munmap (1 samples, 0.22%)</title><rect x="8.7527%" y="437" width="0.2188%" height="15" fill="rgb(253,11,6)" fg:x="40" fg:w="1"/><text x="9.0027%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.7527%" y="421" width="0.2188%" height="15" fill="rgb(247,143,39)" fg:x="40" fg:w="1"/><text x="9.0027%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.7527%" y="405" width="0.2188%" height="15" fill="rgb(236,97,10)" fg:x="40" fg:w="1"/><text x="9.0027%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.7527%" y="389" width="0.2188%" height="15" fill="rgb(233,208,19)" fg:x="40" fg:w="1"/><text x="9.0027%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.7527%" y="373" width="0.2188%" height="15" fill="rgb(216,164,2)" fg:x="40" fg:w="1"/><text x="9.0027%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.7527%" y="357" width="0.2188%" height="15" fill="rgb(220,129,5)" fg:x="40" fg:w="1"/><text x="9.0027%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.7527%" y="341" width="0.2188%" height="15" fill="rgb(242,17,10)" fg:x="40" fg:w="1"/><text x="9.0027%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.7527%" y="325" width="0.2188%" height="15" fill="rgb(242,107,0)" fg:x="40" fg:w="1"/><text x="9.0027%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.44%)</title><rect x="8.7527%" y="581" width="0.4376%" height="15" fill="rgb(251,28,31)" fg:x="40" fg:w="2"/><text x="9.0027%" y="591.50"></text></g><g><title>std::rt::cleanup (2 samples, 0.44%)</title><rect x="8.7527%" y="565" width="0.4376%" height="15" fill="rgb(233,223,10)" fg:x="40" fg:w="2"/><text x="9.0027%" y="575.50"></text></g><g><title>std::sync::once::Once::call_once (2 samples, 0.44%)</title><rect x="8.7527%" y="549" width="0.4376%" height="15" fill="rgb(215,21,27)" fg:x="40" fg:w="2"/><text x="9.0027%" y="559.50"></text></g><g><title>std::sys_common::once::futex::Once::call (2 samples, 0.44%)</title><rect x="8.7527%" y="533" width="0.4376%" height="15" fill="rgb(232,23,21)" fg:x="40" fg:w="2"/><text x="9.0027%" y="543.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (2 samples, 0.44%)</title><rect x="8.7527%" y="517" width="0.4376%" height="15" fill="rgb(244,5,23)" fg:x="40" fg:w="2"/><text x="9.0027%" y="527.50"></text></g><g><title>std::rt::cleanup::{{closure}} (2 samples, 0.44%)</title><rect x="8.7527%" y="501" width="0.4376%" height="15" fill="rgb(226,81,46)" fg:x="40" fg:w="2"/><text x="9.0027%" y="511.50"></text></g><g><title>std::sys::unix::cleanup (2 samples, 0.44%)</title><rect x="8.7527%" y="485" width="0.4376%" height="15" fill="rgb(247,70,30)" fg:x="40" fg:w="2"/><text x="9.0027%" y="495.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::cleanup (2 samples, 0.44%)</title><rect x="8.7527%" y="469" width="0.4376%" height="15" fill="rgb(212,68,19)" fg:x="40" fg:w="2"/><text x="9.0027%" y="479.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (2 samples, 0.44%)</title><rect x="8.7527%" y="453" width="0.4376%" height="15" fill="rgb(240,187,13)" fg:x="40" fg:w="2"/><text x="9.0027%" y="463.50"></text></g><g><title>sigaltstack (1 samples, 0.22%)</title><rect x="8.9716%" y="437" width="0.2188%" height="15" fill="rgb(223,113,26)" fg:x="41" fg:w="1"/><text x="9.2216%" y="447.50"></text></g><g><title>cfree (2 samples, 0.44%)</title><rect x="9.1904%" y="437" width="0.4376%" height="15" fill="rgb(206,192,2)" fg:x="42" fg:w="2"/><text x="9.4404%" y="447.50"></text></g><g><title>__munmap (2 samples, 0.44%)</title><rect x="9.1904%" y="421" width="0.4376%" height="15" fill="rgb(241,108,4)" fg:x="42" fg:w="2"/><text x="9.4404%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.44%)</title><rect x="9.1904%" y="405" width="0.4376%" height="15" fill="rgb(247,173,49)" fg:x="42" fg:w="2"/><text x="9.4404%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.22%)</title><rect x="9.6280%" y="437" width="0.2188%" height="15" fill="rgb(224,114,35)" fg:x="44" fg:w="1"/><text x="9.8780%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.22%)</title><rect x="9.6280%" y="421" width="0.2188%" height="15" fill="rgb(245,159,27)" fg:x="44" fg:w="1"/><text x="9.8780%" y="431.50"></text></g><g><title>[libc.so.6] (7 samples, 1.53%)</title><rect x="10.9409%" y="373" width="1.5317%" height="15" fill="rgb(245,172,44)" fg:x="50" fg:w="7"/><text x="11.1909%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.4726%" y="373" width="0.2188%" height="15" fill="rgb(236,23,11)" fg:x="57" fg:w="1"/><text x="12.7226%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.4726%" y="357" width="0.2188%" height="15" fill="rgb(205,117,38)" fg:x="57" fg:w="1"/><text x="12.7226%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.4726%" y="341" width="0.2188%" height="15" fill="rgb(237,72,25)" fg:x="57" fg:w="1"/><text x="12.7226%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.4726%" y="325" width="0.2188%" height="15" fill="rgb(244,70,9)" fg:x="57" fg:w="1"/><text x="12.7226%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.4726%" y="309" width="0.2188%" height="15" fill="rgb(217,125,39)" fg:x="57" fg:w="1"/><text x="12.7226%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.4726%" y="293" width="0.2188%" height="15" fill="rgb(235,36,10)" fg:x="57" fg:w="1"/><text x="12.7226%" y="303.50"></text></g><g><title>cfree (70 samples, 15.32%)</title><rect x="9.8468%" y="389" width="15.3173%" height="15" fill="rgb(251,123,47)" fg:x="45" fg:w="70"/><text x="10.0968%" y="399.50">cfree</text></g><g><title>__munmap (57 samples, 12.47%)</title><rect x="12.6915%" y="373" width="12.4726%" height="15" fill="rgb(221,13,13)" fg:x="58" fg:w="57"/><text x="12.9415%" y="383.50">__munmap</text></g><g><title>[unknown] (57 samples, 12.47%)</title><rect x="12.6915%" y="357" width="12.4726%" height="15" fill="rgb(238,131,9)" fg:x="58" fg:w="57"/><text x="12.9415%" y="367.50">[unknown]</text></g><g><title>[unknown] (57 samples, 12.47%)</title><rect x="12.6915%" y="341" width="12.4726%" height="15" fill="rgb(211,50,8)" fg:x="58" fg:w="57"/><text x="12.9415%" y="351.50">[unknown]</text></g><g><title>[unknown] (56 samples, 12.25%)</title><rect x="12.9103%" y="325" width="12.2538%" height="15" fill="rgb(245,182,24)" fg:x="59" fg:w="56"/><text x="13.1603%" y="335.50">[unknown]</text></g><g><title>[unknown] (53 samples, 11.60%)</title><rect x="13.5667%" y="309" width="11.5974%" height="15" fill="rgb(242,14,37)" fg:x="62" fg:w="53"/><text x="13.8167%" y="319.50">[unknown]</text></g><g><title>[unknown] (51 samples, 11.16%)</title><rect x="14.0044%" y="293" width="11.1597%" height="15" fill="rgb(246,228,12)" fg:x="64" fg:w="51"/><text x="14.2544%" y="303.50">[unknown]</text></g><g><title>[unknown] (48 samples, 10.50%)</title><rect x="14.6608%" y="277" width="10.5033%" height="15" fill="rgb(213,55,15)" fg:x="67" fg:w="48"/><text x="14.9108%" y="287.50">[unknown]</text></g><g><title>[unknown] (42 samples, 9.19%)</title><rect x="15.9737%" y="261" width="9.1904%" height="15" fill="rgb(209,9,3)" fg:x="73" fg:w="42"/><text x="16.2237%" y="271.50">[unknown]</text></g><g><title>[unknown] (30 samples, 6.56%)</title><rect x="18.5996%" y="245" width="6.5646%" height="15" fill="rgb(230,59,30)" fg:x="85" fg:w="30"/><text x="18.8496%" y="255.50">[unknown]</text></g><g><title>[unknown] (17 samples, 3.72%)</title><rect x="21.4442%" y="229" width="3.7199%" height="15" fill="rgb(209,121,21)" fg:x="98" fg:w="17"/><text x="21.6942%" y="239.50">[unk..</text></g><g><title>[unknown] (3 samples, 0.66%)</title><rect x="24.5077%" y="213" width="0.6565%" height="15" fill="rgb(220,109,13)" fg:x="112" fg:w="3"/><text x="24.7577%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8,read_slow::MyAlloc&gt;&gt; (71 samples, 15.54%)</title><rect x="9.8468%" y="437" width="15.5361%" height="15" fill="rgb(232,18,1)" fg:x="45" fg:w="71"/><text x="10.0968%" y="447.50">core::ptr::drop_in_place..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8,read_slow::MyAlloc&gt;&gt; (71 samples, 15.54%)</title><rect x="9.8468%" y="421" width="15.5361%" height="15" fill="rgb(215,41,42)" fg:x="45" fg:w="71"/><text x="10.0968%" y="431.50">core::ptr::drop_in_place..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 15.54%)</title><rect x="9.8468%" y="405" width="15.5361%" height="15" fill="rgb(224,123,36)" fg:x="45" fg:w="71"/><text x="10.0968%" y="415.50">&lt;alloc::raw_vec::RawVec&lt;..</text></g><g><title>read_slow::std_read_32_byte_aligned (1 samples, 0.22%)</title><rect x="25.1641%" y="389" width="0.2188%" height="15" fill="rgb(240,125,3)" fg:x="115" fg:w="1"/><text x="25.4141%" y="399.50"></text></g><g><title>core::mem::drop (1 samples, 0.22%)</title><rect x="25.1641%" y="373" width="0.2188%" height="15" fill="rgb(205,98,50)" fg:x="115" fg:w="1"/><text x="25.4141%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (1 samples, 0.22%)</title><rect x="25.1641%" y="357" width="0.2188%" height="15" fill="rgb(205,185,37)" fg:x="115" fg:w="1"/><text x="25.4141%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fs::File&gt; (1 samples, 0.22%)</title><rect x="25.1641%" y="341" width="0.2188%" height="15" fill="rgb(238,207,15)" fg:x="115" fg:w="1"/><text x="25.4141%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (1 samples, 0.22%)</title><rect x="25.1641%" y="325" width="0.2188%" height="15" fill="rgb(213,199,42)" fg:x="115" fg:w="1"/><text x="25.4141%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (1 samples, 0.22%)</title><rect x="25.1641%" y="309" width="0.2188%" height="15" fill="rgb(235,201,11)" fg:x="115" fg:w="1"/><text x="25.4141%" y="319.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="25.1641%" y="293" width="0.2188%" height="15" fill="rgb(207,46,11)" fg:x="115" fg:w="1"/><text x="25.4141%" y="303.50"></text></g><g><title>__close (1 samples, 0.22%)</title><rect x="25.1641%" y="277" width="0.2188%" height="15" fill="rgb(241,35,35)" fg:x="115" fg:w="1"/><text x="25.4141%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="25.1641%" y="261" width="0.2188%" height="15" fill="rgb(243,32,47)" fg:x="115" fg:w="1"/><text x="25.4141%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (88 samples, 19.26%)</title><rect x="25.3829%" y="421" width="19.2560%" height="15" fill="rgb(247,202,23)" fg:x="116" fg:w="88"/><text x="25.6329%" y="431.50">&lt;std::fs::File as std::io::Rea..</text></g><g><title>std::sys::unix::fs::File::read (76 samples, 16.63%)</title><rect x="28.0088%" y="405" width="16.6302%" height="15" fill="rgb(219,102,11)" fg:x="128" fg:w="76"/><text x="28.2588%" y="415.50">std::sys::unix::fs::File::..</text></g><g><title>std::sys::unix::fd::FileDesc::read (76 samples, 16.63%)</title><rect x="28.0088%" y="389" width="16.6302%" height="15" fill="rgb(243,110,44)" fg:x="128" fg:w="76"/><text x="28.2588%" y="399.50">std::sys::unix::fd::FileDe..</text></g><g><title>read (76 samples, 16.63%)</title><rect x="28.0088%" y="373" width="16.6302%" height="15" fill="rgb(222,74,54)" fg:x="128" fg:w="76"/><text x="28.2588%" y="383.50">read</text></g><g><title>[unknown] (70 samples, 15.32%)</title><rect x="29.3217%" y="357" width="15.3173%" height="15" fill="rgb(216,99,12)" fg:x="134" fg:w="70"/><text x="29.5717%" y="367.50">[unknown]</text></g><g><title>[unknown] (70 samples, 15.32%)</title><rect x="29.3217%" y="341" width="15.3173%" height="15" fill="rgb(226,22,26)" fg:x="134" fg:w="70"/><text x="29.5717%" y="351.50">[unknown]</text></g><g><title>[unknown] (68 samples, 14.88%)</title><rect x="29.7593%" y="325" width="14.8796%" height="15" fill="rgb(217,163,10)" fg:x="136" fg:w="68"/><text x="30.0093%" y="335.50">[unknown]</text></g><g><title>[unknown] (61 samples, 13.35%)</title><rect x="31.2910%" y="309" width="13.3479%" height="15" fill="rgb(213,25,53)" fg:x="143" fg:w="61"/><text x="31.5410%" y="319.50">[unknown]</text></g><g><title>[unknown] (50 samples, 10.94%)</title><rect x="33.6980%" y="293" width="10.9409%" height="15" fill="rgb(252,105,26)" fg:x="154" fg:w="50"/><text x="33.9480%" y="303.50">[unknown]</text></g><g><title>[unknown] (19 samples, 4.16%)</title><rect x="40.4814%" y="277" width="4.1575%" height="15" fill="rgb(220,39,43)" fg:x="185" fg:w="19"/><text x="40.7314%" y="287.50">[unkn..</text></g><g><title>[unknown] (19 samples, 4.16%)</title><rect x="40.4814%" y="261" width="4.1575%" height="15" fill="rgb(229,68,48)" fg:x="185" fg:w="19"/><text x="40.7314%" y="271.50">[unkn..</text></g><g><title>[unknown] (3 samples, 0.66%)</title><rect x="43.9825%" y="245" width="0.6565%" height="15" fill="rgb(252,8,32)" fg:x="201" fg:w="3"/><text x="44.2325%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="44.4201%" y="229" width="0.2188%" height="15" fill="rgb(223,20,43)" fg:x="203" fg:w="1"/><text x="44.6701%" y="239.50"></text></g><g><title>[unknown] (18 samples, 3.94%)</title><rect x="48.1400%" y="229" width="3.9387%" height="15" fill="rgb(229,81,49)" fg:x="220" fg:w="18"/><text x="48.3900%" y="239.50">[unk..</text></g><g><title>[unknown] (18 samples, 3.94%)</title><rect x="48.1400%" y="213" width="3.9387%" height="15" fill="rgb(236,28,36)" fg:x="220" fg:w="18"/><text x="48.3900%" y="223.50">[unk..</text></g><g><title>[unknown] (18 samples, 3.94%)</title><rect x="48.1400%" y="197" width="3.9387%" height="15" fill="rgb(249,185,26)" fg:x="220" fg:w="18"/><text x="48.3900%" y="207.50">[unk..</text></g><g><title>[unknown] (18 samples, 3.94%)</title><rect x="48.1400%" y="181" width="3.9387%" height="15" fill="rgb(249,174,33)" fg:x="220" fg:w="18"/><text x="48.3900%" y="191.50">[unk..</text></g><g><title>[unknown] (17 samples, 3.72%)</title><rect x="48.3589%" y="165" width="3.7199%" height="15" fill="rgb(233,201,37)" fg:x="221" fg:w="17"/><text x="48.6089%" y="175.50">[unk..</text></g><g><title>[unknown] (17 samples, 3.72%)</title><rect x="48.3589%" y="149" width="3.7199%" height="15" fill="rgb(221,78,26)" fg:x="221" fg:w="17"/><text x="48.6089%" y="159.50">[unk..</text></g><g><title>[unknown] (16 samples, 3.50%)</title><rect x="48.5777%" y="133" width="3.5011%" height="15" fill="rgb(250,127,30)" fg:x="222" fg:w="16"/><text x="48.8277%" y="143.50">[un..</text></g><g><title>[unknown] (15 samples, 3.28%)</title><rect x="48.7965%" y="117" width="3.2823%" height="15" fill="rgb(230,49,44)" fg:x="223" fg:w="15"/><text x="49.0465%" y="127.50">[un..</text></g><g><title>[unknown] (13 samples, 2.84%)</title><rect x="49.2341%" y="101" width="2.8446%" height="15" fill="rgb(229,67,23)" fg:x="225" fg:w="13"/><text x="49.4841%" y="111.50">[u..</text></g><g><title>[unknown] (10 samples, 2.19%)</title><rect x="49.8906%" y="85" width="2.1882%" height="15" fill="rgb(249,83,47)" fg:x="228" fg:w="10"/><text x="50.1406%" y="95.50">[..</text></g><g><title>[unknown] (3 samples, 0.66%)</title><rect x="51.4223%" y="69" width="0.6565%" height="15" fill="rgb(215,43,3)" fg:x="235" fg:w="3"/><text x="51.6723%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="51.8600%" y="53" width="0.2188%" height="15" fill="rgb(238,154,13)" fg:x="237" fg:w="1"/><text x="52.1100%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="51.8600%" y="37" width="0.2188%" height="15" fill="rgb(219,56,2)" fg:x="237" fg:w="1"/><text x="52.1100%" y="47.50"></text></g><g><title>__rdl_alloc (95 samples, 20.79%)</title><rect x="44.6389%" y="373" width="20.7877%" height="15" fill="rgb(233,0,4)" fg:x="204" fg:w="95"/><text x="44.8889%" y="383.50">__rdl_alloc</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (95 samples, 20.79%)</title><rect x="44.6389%" y="357" width="20.7877%" height="15" fill="rgb(235,30,7)" fg:x="204" fg:w="95"/><text x="44.8889%" y="367.50">std::sys::unix::alloc::&lt;impl core..</text></g><g><title>std::sys::unix::alloc::aligned_malloc (95 samples, 20.79%)</title><rect x="44.6389%" y="341" width="20.7877%" height="15" fill="rgb(250,79,13)" fg:x="204" fg:w="95"/><text x="44.8889%" y="351.50">std::sys::unix::alloc::aligned_ma..</text></g><g><title>posix_memalign (95 samples, 20.79%)</title><rect x="44.6389%" y="325" width="20.7877%" height="15" fill="rgb(211,146,34)" fg:x="204" fg:w="95"/><text x="44.8889%" y="335.50">posix_memalign</text></g><g><title>[libc.so.6] (95 samples, 20.79%)</title><rect x="44.6389%" y="309" width="20.7877%" height="15" fill="rgb(228,22,38)" fg:x="204" fg:w="95"/><text x="44.8889%" y="319.50">[libc.so.6]</text></g><g><title>[libc.so.6] (95 samples, 20.79%)</title><rect x="44.6389%" y="293" width="20.7877%" height="15" fill="rgb(235,168,5)" fg:x="204" fg:w="95"/><text x="44.8889%" y="303.50">[libc.so.6]</text></g><g><title>[libc.so.6] (94 samples, 20.57%)</title><rect x="44.8578%" y="277" width="20.5689%" height="15" fill="rgb(221,155,16)" fg:x="205" fg:w="94"/><text x="45.1078%" y="287.50">[libc.so.6]</text></g><g><title>[libc.so.6] (82 samples, 17.94%)</title><rect x="47.4836%" y="261" width="17.9431%" height="15" fill="rgb(215,215,53)" fg:x="217" fg:w="82"/><text x="47.7336%" y="271.50">[libc.so.6]</text></g><g><title>[libc.so.6] (82 samples, 17.94%)</title><rect x="47.4836%" y="245" width="17.9431%" height="15" fill="rgb(223,4,10)" fg:x="217" fg:w="82"/><text x="47.7336%" y="255.50">[libc.so.6]</text></g><g><title>__mmap (61 samples, 13.35%)</title><rect x="52.0788%" y="229" width="13.3479%" height="15" fill="rgb(234,103,6)" fg:x="238" fg:w="61"/><text x="52.3288%" y="239.50">__mmap</text></g><g><title>[unknown] (56 samples, 12.25%)</title><rect x="53.1729%" y="213" width="12.2538%" height="15" fill="rgb(227,97,0)" fg:x="243" fg:w="56"/><text x="53.4229%" y="223.50">[unknown]</text></g><g><title>[unknown] (56 samples, 12.25%)</title><rect x="53.1729%" y="197" width="12.2538%" height="15" fill="rgb(234,150,53)" fg:x="243" fg:w="56"/><text x="53.4229%" y="207.50">[unknown]</text></g><g><title>[unknown] (56 samples, 12.25%)</title><rect x="53.1729%" y="181" width="12.2538%" height="15" fill="rgb(228,201,54)" fg:x="243" fg:w="56"/><text x="53.4229%" y="191.50">[unknown]</text></g><g><title>[unknown] (32 samples, 7.00%)</title><rect x="58.4245%" y="165" width="7.0022%" height="15" fill="rgb(222,22,37)" fg:x="267" fg:w="32"/><text x="58.6745%" y="175.50">[unknown]</text></g><g><title>[unknown] (13 samples, 2.84%)</title><rect x="62.5821%" y="149" width="2.8446%" height="15" fill="rgb(237,53,32)" fg:x="286" fg:w="13"/><text x="62.8321%" y="159.50">[u..</text></g><g><title>[unknown] (4 samples, 0.88%)</title><rect x="64.5514%" y="133" width="0.8753%" height="15" fill="rgb(233,25,53)" fg:x="295" fg:w="4"/><text x="64.8014%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (96 samples, 21.01%)</title><rect x="44.6389%" y="421" width="21.0066%" height="15" fill="rgb(210,40,34)" fg:x="204" fg:w="96"/><text x="44.8889%" y="431.50">alloc::vec::Vec&lt;T,A&gt;::with_capaci..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (96 samples, 21.01%)</title><rect x="44.6389%" y="405" width="21.0066%" height="15" fill="rgb(241,220,44)" fg:x="204" fg:w="96"/><text x="44.8889%" y="415.50">alloc::raw_vec::RawVec&lt;T,A&gt;::with..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (96 samples, 21.01%)</title><rect x="44.6389%" y="389" width="21.0066%" height="15" fill="rgb(235,28,35)" fg:x="204" fg:w="96"/><text x="44.8889%" y="399.50">alloc::raw_vec::RawVec&lt;T,A&gt;::allo..</text></g><g><title>std::fs::File::metadata (1 samples, 0.22%)</title><rect x="65.4267%" y="373" width="0.2188%" height="15" fill="rgb(210,56,17)" fg:x="299" fg:w="1"/><text x="65.6767%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.22%)</title><rect x="65.4267%" y="357" width="0.2188%" height="15" fill="rgb(224,130,29)" fg:x="299" fg:w="1"/><text x="65.6767%" y="367.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.22%)</title><rect x="65.4267%" y="341" width="0.2188%" height="15" fill="rgb(235,212,8)" fg:x="299" fg:w="1"/><text x="65.6767%" y="351.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.22%)</title><rect x="65.4267%" y="325" width="0.2188%" height="15" fill="rgb(223,33,50)" fg:x="299" fg:w="1"/><text x="65.6767%" y="335.50"></text></g><g><title>statx (1 samples, 0.22%)</title><rect x="65.4267%" y="309" width="0.2188%" height="15" fill="rgb(219,149,13)" fg:x="299" fg:w="1"/><text x="65.6767%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="65.4267%" y="293" width="0.2188%" height="15" fill="rgb(250,156,29)" fg:x="299" fg:w="1"/><text x="65.6767%" y="303.50"></text></g><g><title>core::mem::drop (20 samples, 4.38%)</title><rect x="65.6455%" y="421" width="4.3764%" height="15" fill="rgb(216,193,19)" fg:x="300" fg:w="20"/><text x="65.8955%" y="431.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (20 samples, 4.38%)</title><rect x="65.6455%" y="405" width="4.3764%" height="15" fill="rgb(216,135,14)" fg:x="300" fg:w="20"/><text x="65.8955%" y="415.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fs::File&gt; (20 samples, 4.38%)</title><rect x="65.6455%" y="389" width="4.3764%" height="15" fill="rgb(241,47,5)" fg:x="300" fg:w="20"/><text x="65.8955%" y="399.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (20 samples, 4.38%)</title><rect x="65.6455%" y="373" width="4.3764%" height="15" fill="rgb(233,42,35)" fg:x="300" fg:w="20"/><text x="65.8955%" y="383.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (20 samples, 4.38%)</title><rect x="65.6455%" y="357" width="4.3764%" height="15" fill="rgb(231,13,6)" fg:x="300" fg:w="20"/><text x="65.8955%" y="367.50">core:..</text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (20 samples, 4.38%)</title><rect x="65.6455%" y="341" width="4.3764%" height="15" fill="rgb(207,181,40)" fg:x="300" fg:w="20"/><text x="65.8955%" y="351.50">&lt;std:..</text></g><g><title>__close (20 samples, 4.38%)</title><rect x="65.6455%" y="325" width="4.3764%" height="15" fill="rgb(254,173,49)" fg:x="300" fg:w="20"/><text x="65.8955%" y="335.50">__clo..</text></g><g><title>[unknown] (20 samples, 4.38%)</title><rect x="65.6455%" y="309" width="4.3764%" height="15" fill="rgb(221,1,38)" fg:x="300" fg:w="20"/><text x="65.8955%" y="319.50">[unkn..</text></g><g><title>[unknown] (20 samples, 4.38%)</title><rect x="65.6455%" y="293" width="4.3764%" height="15" fill="rgb(206,124,46)" fg:x="300" fg:w="20"/><text x="65.8955%" y="303.50">[unkn..</text></g><g><title>[unknown] (20 samples, 4.38%)</title><rect x="65.6455%" y="277" width="4.3764%" height="15" fill="rgb(249,21,11)" fg:x="300" fg:w="20"/><text x="65.8955%" y="287.50">[unkn..</text></g><g><title>[unknown] (20 samples, 4.38%)</title><rect x="65.6455%" y="261" width="4.3764%" height="15" fill="rgb(222,201,40)" fg:x="300" fg:w="20"/><text x="65.8955%" y="271.50">[unkn..</text></g><g><title>[unknown] (19 samples, 4.16%)</title><rect x="65.8643%" y="245" width="4.1575%" height="15" fill="rgb(235,61,29)" fg:x="301" fg:w="19"/><text x="66.1143%" y="255.50">[unkn..</text></g><g><title>[unknown] (14 samples, 3.06%)</title><rect x="66.9584%" y="229" width="3.0635%" height="15" fill="rgb(219,207,3)" fg:x="306" fg:w="14"/><text x="67.2084%" y="239.50">[un..</text></g><g><title>[unknown] (6 samples, 1.31%)</title><rect x="68.7090%" y="213" width="1.3129%" height="15" fill="rgb(222,56,46)" fg:x="314" fg:w="6"/><text x="68.9590%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.44%)</title><rect x="70.0219%" y="421" width="0.4376%" height="15" fill="rgb(239,76,54)" fg:x="320" fg:w="2"/><text x="70.2719%" y="431.50"></text></g><g><title>std::fs::File::metadata (18 samples, 3.94%)</title><rect x="70.4595%" y="421" width="3.9387%" height="15" fill="rgb(231,124,27)" fg:x="322" fg:w="18"/><text x="70.7095%" y="431.50">std:..</text></g><g><title>std::sys::unix::fs::File::file_attr (18 samples, 3.94%)</title><rect x="70.4595%" y="405" width="3.9387%" height="15" fill="rgb(249,195,6)" fg:x="322" fg:w="18"/><text x="70.7095%" y="415.50">std:..</text></g><g><title>std::sys::unix::fs::try_statx (18 samples, 3.94%)</title><rect x="70.4595%" y="389" width="3.9387%" height="15" fill="rgb(237,174,47)" fg:x="322" fg:w="18"/><text x="70.7095%" y="399.50">std:..</text></g><g><title>std::sys::unix::fs::try_statx::statx (18 samples, 3.94%)</title><rect x="70.4595%" y="373" width="3.9387%" height="15" fill="rgb(206,201,31)" fg:x="322" fg:w="18"/><text x="70.7095%" y="383.50">std:..</text></g><g><title>statx (18 samples, 3.94%)</title><rect x="70.4595%" y="357" width="3.9387%" height="15" fill="rgb(231,57,52)" fg:x="322" fg:w="18"/><text x="70.7095%" y="367.50">statx</text></g><g><title>[unknown] (18 samples, 3.94%)</title><rect x="70.4595%" y="341" width="3.9387%" height="15" fill="rgb(248,177,22)" fg:x="322" fg:w="18"/><text x="70.7095%" y="351.50">[unk..</text></g><g><title>[unknown] (18 samples, 3.94%)</title><rect x="70.4595%" y="325" width="3.9387%" height="15" fill="rgb(215,211,37)" fg:x="322" fg:w="18"/><text x="70.7095%" y="335.50">[unk..</text></g><g><title>[unknown] (18 samples, 3.94%)</title><rect x="70.4595%" y="309" width="3.9387%" height="15" fill="rgb(241,128,51)" fg:x="322" fg:w="18"/><text x="70.7095%" y="319.50">[unk..</text></g><g><title>[unknown] (17 samples, 3.72%)</title><rect x="70.6783%" y="293" width="3.7199%" height="15" fill="rgb(227,165,31)" fg:x="323" fg:w="17"/><text x="70.9283%" y="303.50">[unk..</text></g><g><title>[unknown] (16 samples, 3.50%)</title><rect x="70.8972%" y="277" width="3.5011%" height="15" fill="rgb(228,167,24)" fg:x="324" fg:w="16"/><text x="71.1472%" y="287.50">[un..</text></g><g><title>[unknown] (14 samples, 3.06%)</title><rect x="71.3348%" y="261" width="3.0635%" height="15" fill="rgb(228,143,12)" fg:x="326" fg:w="14"/><text x="71.5848%" y="271.50">[un..</text></g><g><title>[unknown] (8 samples, 1.75%)</title><rect x="72.6477%" y="245" width="1.7505%" height="15" fill="rgb(249,149,8)" fg:x="332" fg:w="8"/><text x="72.8977%" y="255.50"></text></g><g><title>[unknown] (5 samples, 1.09%)</title><rect x="73.3042%" y="229" width="1.0941%" height="15" fill="rgb(243,35,44)" fg:x="335" fg:w="5"/><text x="73.5542%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="74.1794%" y="213" width="0.2188%" height="15" fill="rgb(246,89,9)" fg:x="339" fg:w="1"/><text x="74.4294%" y="223.50"></text></g><g><title>std::fs::OpenOptions::new (1 samples, 0.22%)</title><rect x="74.3982%" y="405" width="0.2188%" height="15" fill="rgb(233,213,13)" fg:x="340" fg:w="1"/><text x="74.6482%" y="415.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (9 samples, 1.97%)</title><rect x="74.8359%" y="325" width="1.9694%" height="15" fill="rgb(233,141,41)" fg:x="342" fg:w="9"/><text x="75.0859%" y="335.50">c..</text></g><g><title>core::slice::memchr::memchr (1 samples, 0.22%)</title><rect x="76.5864%" y="309" width="0.2188%" height="15" fill="rgb(239,167,4)" fg:x="350" fg:w="1"/><text x="76.8364%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.22%)</title><rect x="76.5864%" y="293" width="0.2188%" height="15" fill="rgb(209,217,16)" fg:x="350" fg:w="1"/><text x="76.8364%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 4.38%)</title><rect x="76.8053%" y="325" width="4.3764%" height="15" fill="rgb(219,88,35)" fg:x="351" fg:w="20"/><text x="77.0553%" y="335.50">core:..</text></g><g><title>[libc.so.6] (20 samples, 4.38%)</title><rect x="76.8053%" y="309" width="4.3764%" height="15" fill="rgb(220,193,23)" fg:x="351" fg:w="20"/><text x="77.0553%" y="319.50">[libc..</text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="293" width="0.2188%" height="15" fill="rgb(230,90,52)" fg:x="370" fg:w="1"/><text x="81.2128%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="277" width="0.2188%" height="15" fill="rgb(252,106,19)" fg:x="370" fg:w="1"/><text x="81.2128%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="261" width="0.2188%" height="15" fill="rgb(206,74,20)" fg:x="370" fg:w="1"/><text x="81.2128%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="245" width="0.2188%" height="15" fill="rgb(230,138,44)" fg:x="370" fg:w="1"/><text x="81.2128%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="229" width="0.2188%" height="15" fill="rgb(235,182,43)" fg:x="370" fg:w="1"/><text x="81.2128%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="213" width="0.2188%" height="15" fill="rgb(242,16,51)" fg:x="370" fg:w="1"/><text x="81.2128%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="197" width="0.2188%" height="15" fill="rgb(248,9,4)" fg:x="370" fg:w="1"/><text x="81.2128%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="181" width="0.2188%" height="15" fill="rgb(210,31,22)" fg:x="370" fg:w="1"/><text x="81.2128%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="165" width="0.2188%" height="15" fill="rgb(239,54,39)" fg:x="370" fg:w="1"/><text x="81.2128%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="80.9628%" y="149" width="0.2188%" height="15" fill="rgb(230,99,41)" fg:x="370" fg:w="1"/><text x="81.2128%" y="159.50"></text></g><g><title>std::sys::unix::cvt_r (70 samples, 15.32%)</title><rect x="83.5886%" y="293" width="15.3173%" height="15" fill="rgb(253,106,12)" fg:x="382" fg:w="70"/><text x="83.8386%" y="303.50">std::sys::unix::cvt_r</text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (70 samples, 15.32%)</title><rect x="83.5886%" y="277" width="15.3173%" height="15" fill="rgb(213,46,41)" fg:x="382" fg:w="70"/><text x="83.8386%" y="287.50">std::sys::unix::fs::Fil..</text></g><g><title>open64 (70 samples, 15.32%)</title><rect x="83.5886%" y="261" width="15.3173%" height="15" fill="rgb(215,133,35)" fg:x="382" fg:w="70"/><text x="83.8386%" y="271.50">open64</text></g><g><title>[unknown] (58 samples, 12.69%)</title><rect x="86.2144%" y="245" width="12.6915%" height="15" fill="rgb(213,28,5)" fg:x="394" fg:w="58"/><text x="86.4644%" y="255.50">[unknown]</text></g><g><title>[unknown] (58 samples, 12.69%)</title><rect x="86.2144%" y="229" width="12.6915%" height="15" fill="rgb(215,77,49)" fg:x="394" fg:w="58"/><text x="86.4644%" y="239.50">[unknown]</text></g><g><title>[unknown] (52 samples, 11.38%)</title><rect x="87.5274%" y="213" width="11.3786%" height="15" fill="rgb(248,100,22)" fg:x="400" fg:w="52"/><text x="87.7774%" y="223.50">[unknown]</text></g><g><title>[unknown] (43 samples, 9.41%)</title><rect x="89.4967%" y="197" width="9.4092%" height="15" fill="rgb(208,67,9)" fg:x="409" fg:w="43"/><text x="89.7467%" y="207.50">[unknown]</text></g><g><title>[unknown] (30 samples, 6.56%)</title><rect x="92.3414%" y="181" width="6.5646%" height="15" fill="rgb(219,133,21)" fg:x="422" fg:w="30"/><text x="92.5914%" y="191.50">[unknown]</text></g><g><title>[unknown] (15 samples, 3.28%)</title><rect x="95.6236%" y="165" width="3.2823%" height="15" fill="rgb(246,46,29)" fg:x="437" fg:w="15"/><text x="95.8736%" y="175.50">[un..</text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="98.6871%" y="149" width="0.2188%" height="15" fill="rgb(246,185,52)" fg:x="451" fg:w="1"/><text x="98.9371%" y="159.50"></text></g><g><title>std::fs::OpenOptions::open (113 samples, 24.73%)</title><rect x="74.6171%" y="405" width="24.7265%" height="15" fill="rgb(252,136,11)" fg:x="341" fg:w="113"/><text x="74.8671%" y="415.50">std::fs::OpenOptions::open</text></g><g><title>std::fs::OpenOptions::_open (113 samples, 24.73%)</title><rect x="74.6171%" y="389" width="24.7265%" height="15" fill="rgb(219,138,53)" fg:x="341" fg:w="113"/><text x="74.8671%" y="399.50">std::fs::OpenOptions::_open</text></g><g><title>std::sys::unix::fs::File::open (112 samples, 24.51%)</title><rect x="74.8359%" y="373" width="24.5077%" height="15" fill="rgb(211,51,23)" fg:x="342" fg:w="112"/><text x="75.0859%" y="383.50">std::sys::unix::fs::File::open</text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (112 samples, 24.51%)</title><rect x="74.8359%" y="357" width="24.5077%" height="15" fill="rgb(247,221,28)" fg:x="342" fg:w="112"/><text x="75.0859%" y="367.50">std::sys::common::small_c_string::run_p..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (112 samples, 24.51%)</title><rect x="74.8359%" y="341" width="24.5077%" height="15" fill="rgb(251,222,45)" fg:x="342" fg:w="112"/><text x="75.0859%" y="351.50">std::sys::common::small_c_string::run_w..</text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (83 samples, 18.16%)</title><rect x="81.1816%" y="325" width="18.1619%" height="15" fill="rgb(217,162,53)" fg:x="371" fg:w="83"/><text x="81.4316%" y="335.50">std::sys::unix::fs::File::op..</text></g><g><title>std::sys::unix::fs::File::open_c (83 samples, 18.16%)</title><rect x="81.1816%" y="309" width="18.1619%" height="15" fill="rgb(229,93,14)" fg:x="371" fg:w="83"/><text x="81.4316%" y="319.50">std::sys::unix::fs::File::op..</text></g><g><title>std::sys::unix::fs::OpenOptions::get_access_mode (2 samples, 0.44%)</title><rect x="98.9059%" y="293" width="0.4376%" height="15" fill="rgb(209,67,49)" fg:x="452" fg:w="2"/><text x="99.1559%" y="303.50"></text></g><g><title>std::panic::catch_unwind (413 samples, 90.37%)</title><rect x="9.1904%" y="565" width="90.3720%" height="15" fill="rgb(213,87,29)" fg:x="42" fg:w="413"/><text x="9.4404%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (413 samples, 90.37%)</title><rect x="9.1904%" y="549" width="90.3720%" height="15" fill="rgb(205,151,52)" fg:x="42" fg:w="413"/><text x="9.4404%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (413 samples, 90.37%)</title><rect x="9.1904%" y="533" width="90.3720%" height="15" fill="rgb(253,215,39)" fg:x="42" fg:w="413"/><text x="9.4404%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (413 samples, 90.37%)</title><rect x="9.1904%" y="517" width="90.3720%" height="15" fill="rgb(221,220,41)" fg:x="42" fg:w="413"/><text x="9.4404%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (413 samples, 90.37%)</title><rect x="9.1904%" y="501" width="90.3720%" height="15" fill="rgb(218,133,21)" fg:x="42" fg:w="413"/><text x="9.4404%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (413 samples, 90.37%)</title><rect x="9.1904%" y="485" width="90.3720%" height="15" fill="rgb(221,193,43)" fg:x="42" fg:w="413"/><text x="9.4404%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (413 samples, 90.37%)</title><rect x="9.1904%" y="469" width="90.3720%" height="15" fill="rgb(240,128,52)" fg:x="42" fg:w="413"/><text x="9.4404%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>read_slow::main (413 samples, 90.37%)</title><rect x="9.1904%" y="453" width="90.3720%" height="15" fill="rgb(253,114,12)" fg:x="42" fg:w="413"/><text x="9.4404%" y="463.50">read_slow::main</text></g><g><title>read_slow::std_read_32_byte_aligned (339 samples, 74.18%)</title><rect x="25.3829%" y="437" width="74.1794%" height="15" fill="rgb(215,223,47)" fg:x="116" fg:w="339"/><text x="25.6329%" y="447.50">read_slow::std_read_32_byte_aligned</text></g><g><title>std::fs::File::open (115 samples, 25.16%)</title><rect x="74.3982%" y="421" width="25.1641%" height="15" fill="rgb(248,225,23)" fg:x="340" fg:w="115"/><text x="74.6482%" y="431.50">std::fs::File::open</text></g><g><title>std::fs::OpenOptions::read (1 samples, 0.22%)</title><rect x="99.3435%" y="405" width="0.2188%" height="15" fill="rgb(250,108,0)" fg:x="454" fg:w="1"/><text x="99.5935%" y="415.50"></text></g><g><title>alloc::ffi::c_str::CString::new (1 samples, 0.22%)</title><rect x="99.5624%" y="549" width="0.2188%" height="15" fill="rgb(228,208,7)" fg:x="455" fg:w="1"/><text x="99.8124%" y="559.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.22%)</title><rect x="99.5624%" y="533" width="0.2188%" height="15" fill="rgb(244,45,10)" fg:x="455" fg:w="1"/><text x="99.8124%" y="543.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.22%)</title><rect x="99.5624%" y="517" width="0.2188%" height="15" fill="rgb(207,125,25)" fg:x="455" fg:w="1"/><text x="99.8124%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.22%)</title><rect x="99.5624%" y="501" width="0.2188%" height="15" fill="rgb(210,195,18)" fg:x="455" fg:w="1"/><text x="99.8124%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.22%)</title><rect x="99.5624%" y="485" width="0.2188%" height="15" fill="rgb(249,80,12)" fg:x="455" fg:w="1"/><text x="99.8124%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.5624%" y="469" width="0.2188%" height="15" fill="rgb(221,65,9)" fg:x="455" fg:w="1"/><text x="99.8124%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.5624%" y="453" width="0.2188%" height="15" fill="rgb(235,49,36)" fg:x="455" fg:w="1"/><text x="99.8124%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.5624%" y="437" width="0.2188%" height="15" fill="rgb(225,32,20)" fg:x="455" fg:w="1"/><text x="99.8124%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="99.5624%" y="421" width="0.2188%" height="15" fill="rgb(215,141,46)" fg:x="455" fg:w="1"/><text x="99.8124%" y="431.50"></text></g><g><title>all (457 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="457"/><text x="0.2500%" y="751.50"></text></g><g><title>read_slow (457 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="457"/><text x="0.2500%" y="735.50">read_slow</text></g><g><title>_start (421 samples, 92.12%)</title><rect x="7.8775%" y="709" width="92.1225%" height="15" fill="rgb(234,217,39)" fg:x="36" fg:w="421"/><text x="8.1275%" y="719.50">_start</text></g><g><title>__libc_start_main (421 samples, 92.12%)</title><rect x="7.8775%" y="693" width="92.1225%" height="15" fill="rgb(207,178,40)" fg:x="36" fg:w="421"/><text x="8.1275%" y="703.50">__libc_start_main</text></g><g><title>[libc.so.6] (421 samples, 92.12%)</title><rect x="7.8775%" y="677" width="92.1225%" height="15" fill="rgb(221,136,13)" fg:x="36" fg:w="421"/><text x="8.1275%" y="687.50">[libc.so.6]</text></g><g><title>main (418 samples, 91.47%)</title><rect x="8.5339%" y="661" width="91.4661%" height="15" fill="rgb(249,199,10)" fg:x="39" fg:w="418"/><text x="8.7839%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (417 samples, 91.25%)</title><rect x="8.7527%" y="645" width="91.2473%" height="15" fill="rgb(249,222,13)" fg:x="40" fg:w="417"/><text x="9.0027%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (417 samples, 91.25%)</title><rect x="8.7527%" y="629" width="91.2473%" height="15" fill="rgb(244,185,38)" fg:x="40" fg:w="417"/><text x="9.0027%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (417 samples, 91.25%)</title><rect x="8.7527%" y="613" width="91.2473%" height="15" fill="rgb(236,202,9)" fg:x="40" fg:w="417"/><text x="9.0027%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (417 samples, 91.25%)</title><rect x="8.7527%" y="597" width="91.2473%" height="15" fill="rgb(250,229,37)" fg:x="40" fg:w="417"/><text x="9.0027%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (415 samples, 90.81%)</title><rect x="9.1904%" y="581" width="90.8096%" height="15" fill="rgb(206,174,23)" fg:x="42" fg:w="415"/><text x="9.4404%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (2 samples, 0.44%)</title><rect x="99.5624%" y="565" width="0.4376%" height="15" fill="rgb(211,33,43)" fg:x="455" fg:w="2"/><text x="99.8124%" y="575.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.22%)</title><rect x="99.7812%" y="549" width="0.2188%" height="15" fill="rgb(245,58,50)" fg:x="456" fg:w="1"/><text x="100.0312%" y="559.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.22%)</title><rect x="99.7812%" y="533" width="0.2188%" height="15" fill="rgb(244,68,36)" fg:x="456" fg:w="1"/><text x="100.0312%" y="543.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.22%)</title><rect x="99.7812%" y="517" width="0.2188%" height="15" fill="rgb(232,229,15)" fg:x="456" fg:w="1"/><text x="100.0312%" y="527.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.22%)</title><rect x="99.7812%" y="501" width="0.2188%" height="15" fill="rgb(254,30,23)" fg:x="456" fg:w="1"/><text x="100.0312%" y="511.50"></text></g><g><title>__isoc99_sscanf (1 samples, 0.22%)</title><rect x="99.7812%" y="485" width="0.2188%" height="15" fill="rgb(235,160,14)" fg:x="456" fg:w="1"/><text x="100.0312%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="99.7812%" y="469" width="0.2188%" height="15" fill="rgb(212,155,44)" fg:x="456" fg:w="1"/><text x="100.0312%" y="479.50"></text></g></svg></svg>