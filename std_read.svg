<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="464"><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.65%)</title><rect x="3.8793%" y="565" width="0.6466%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="3"/><text x="4.1293%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.22%)</title><rect x="4.3103%" y="549" width="0.2155%" height="15" fill="rgb(217,0,24)" fg:x="20" fg:w="1"/><text x="4.5603%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.22%)</title><rect x="4.3103%" y="533" width="0.2155%" height="15" fill="rgb(221,193,54)" fg:x="20" fg:w="1"/><text x="4.5603%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 1.08%)</title><rect x="3.6638%" y="581" width="1.0776%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="5"/><text x="3.9138%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5259%" y="565" width="0.2155%" height="15" fill="rgb(208,68,35)" fg:x="21" fg:w="1"/><text x="4.7759%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5259%" y="549" width="0.2155%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="1"/><text x="4.7759%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5259%" y="533" width="0.2155%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="1"/><text x="4.7759%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5259%" y="517" width="0.2155%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="1"/><text x="4.7759%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5259%" y="501" width="0.2155%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="1"/><text x="4.7759%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5259%" y="485" width="0.2155%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="1"/><text x="4.7759%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5259%" y="469" width="0.2155%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="1"/><text x="4.7759%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.5259%" y="453" width="0.2155%" height="15" fill="rgb(240,193,28)" fg:x="21" fg:w="1"/><text x="4.7759%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="4.7414%" y="581" width="0.4310%" height="15" fill="rgb(216,20,37)" fg:x="22" fg:w="2"/><text x="4.9914%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="4.7414%" y="565" width="0.4310%" height="15" fill="rgb(206,188,39)" fg:x="22" fg:w="2"/><text x="4.9914%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="4.7414%" y="549" width="0.4310%" height="15" fill="rgb(217,207,13)" fg:x="22" fg:w="2"/><text x="4.9914%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="4.7414%" y="533" width="0.4310%" height="15" fill="rgb(231,73,38)" fg:x="22" fg:w="2"/><text x="4.9914%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="4.7414%" y="517" width="0.4310%" height="15" fill="rgb(225,20,46)" fg:x="22" fg:w="2"/><text x="4.9914%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="4.7414%" y="501" width="0.4310%" height="15" fill="rgb(210,31,41)" fg:x="22" fg:w="2"/><text x="4.9914%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="4.7414%" y="485" width="0.4310%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="2"/><text x="4.9914%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.9569%" y="469" width="0.2155%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="1"/><text x="5.2069%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.9569%" y="453" width="0.2155%" height="15" fill="rgb(249,33,26)" fg:x="23" fg:w="1"/><text x="5.2069%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.9569%" y="437" width="0.2155%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="1"/><text x="5.2069%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.9569%" y="421" width="0.2155%" height="15" fill="rgb(221,5,38)" fg:x="23" fg:w="1"/><text x="5.2069%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.9569%" y="405" width="0.2155%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="1"/><text x="5.2069%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="4.9569%" y="389" width="0.2155%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="1"/><text x="5.2069%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.22%)</title><rect x="5.1724%" y="517" width="0.2155%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="1"/><text x="5.4224%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.22%)</title><rect x="5.1724%" y="501" width="0.2155%" height="15" fill="rgb(225,111,53)" fg:x="24" fg:w="1"/><text x="5.4224%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.1724%" y="485" width="0.2155%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="1"/><text x="5.4224%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.1724%" y="469" width="0.2155%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="1"/><text x="5.4224%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.1724%" y="453" width="0.2155%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="1"/><text x="5.4224%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.1724%" y="437" width="0.2155%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="1"/><text x="5.4224%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.1724%" y="421" width="0.2155%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="1"/><text x="5.4224%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (17 samples, 3.66%)</title><rect x="1.9397%" y="597" width="3.6638%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="17"/><text x="2.1897%" y="607.50">[ld-..</text></g><g><title>_dl_catch_exception (2 samples, 0.43%)</title><rect x="5.1724%" y="581" width="0.4310%" height="15" fill="rgb(254,191,54)" fg:x="24" fg:w="2"/><text x="5.4224%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.43%)</title><rect x="5.1724%" y="565" width="0.4310%" height="15" fill="rgb(241,83,37)" fg:x="24" fg:w="2"/><text x="5.4224%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.43%)</title><rect x="5.1724%" y="549" width="0.4310%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="2"/><text x="5.4224%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.43%)</title><rect x="5.1724%" y="533" width="0.4310%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="2"/><text x="5.4224%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="517" width="0.2155%" height="15" fill="rgb(245,192,40)" fg:x="25" fg:w="1"/><text x="5.6379%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="501" width="0.2155%" height="15" fill="rgb(238,167,29)" fg:x="25" fg:w="1"/><text x="5.6379%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="485" width="0.2155%" height="15" fill="rgb(232,182,51)" fg:x="25" fg:w="1"/><text x="5.6379%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="469" width="0.2155%" height="15" fill="rgb(231,60,39)" fg:x="25" fg:w="1"/><text x="5.6379%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="453" width="0.2155%" height="15" fill="rgb(208,69,12)" fg:x="25" fg:w="1"/><text x="5.6379%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="437" width="0.2155%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="1"/><text x="5.6379%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="421" width="0.2155%" height="15" fill="rgb(213,116,39)" fg:x="25" fg:w="1"/><text x="5.6379%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="405" width="0.2155%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="1"/><text x="5.6379%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="389" width="0.2155%" height="15" fill="rgb(206,96,30)" fg:x="25" fg:w="1"/><text x="5.6379%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="373" width="0.2155%" height="15" fill="rgb(218,138,4)" fg:x="25" fg:w="1"/><text x="5.6379%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.3879%" y="357" width="0.2155%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="1"/><text x="5.6379%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (28 samples, 6.03%)</title><rect x="0.0000%" y="613" width="6.0345%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="28"/><text x="0.2500%" y="623.50">[ld-linu..</text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="5.6034%" y="597" width="0.4310%" height="15" fill="rgb(206,27,48)" fg:x="26" fg:w="2"/><text x="5.8534%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="5.6034%" y="581" width="0.4310%" height="15" fill="rgb(225,35,8)" fg:x="26" fg:w="2"/><text x="5.8534%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="5.6034%" y="565" width="0.4310%" height="15" fill="rgb(250,213,24)" fg:x="26" fg:w="2"/><text x="5.8534%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="5.6034%" y="549" width="0.4310%" height="15" fill="rgb(247,123,22)" fg:x="26" fg:w="2"/><text x="5.8534%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.8190%" y="533" width="0.2155%" height="15" fill="rgb(231,138,38)" fg:x="27" fg:w="1"/><text x="6.0690%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.8190%" y="517" width="0.2155%" height="15" fill="rgb(231,145,46)" fg:x="27" fg:w="1"/><text x="6.0690%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.8190%" y="501" width="0.2155%" height="15" fill="rgb(251,118,11)" fg:x="27" fg:w="1"/><text x="6.0690%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="5.8190%" y="485" width="0.2155%" height="15" fill="rgb(217,147,25)" fg:x="27" fg:w="1"/><text x="6.0690%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (29 samples, 6.25%)</title><rect x="0.0000%" y="629" width="6.2500%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="29"/><text x="0.2500%" y="639.50">[ld-linu..</text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.0345%" y="613" width="0.2155%" height="15" fill="rgb(209,12,38)" fg:x="28" fg:w="1"/><text x="6.2845%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.0345%" y="597" width="0.2155%" height="15" fill="rgb(227,1,9)" fg:x="28" fg:w="1"/><text x="6.2845%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.0345%" y="581" width="0.2155%" height="15" fill="rgb(248,47,43)" fg:x="28" fg:w="1"/><text x="6.2845%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.0345%" y="565" width="0.2155%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="1"/><text x="6.2845%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.0345%" y="549" width="0.2155%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="1"/><text x="6.2845%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.0345%" y="533" width="0.2155%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="1"/><text x="6.2845%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.0345%" y="517" width="0.2155%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="1"/><text x="6.2845%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="6.0345%" y="501" width="0.2155%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="1"/><text x="6.2845%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (33 samples, 7.11%)</title><rect x="0.0000%" y="645" width="7.1121%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="33"/><text x="0.2500%" y="655.50">[ld-linux-..</text></g><g><title>[unknown] (4 samples, 0.86%)</title><rect x="6.2500%" y="629" width="0.8621%" height="15" fill="rgb(213,79,30)" fg:x="29" fg:w="4"/><text x="6.5000%" y="639.50"></text></g><g><title>[unknown] (4 samples, 0.86%)</title><rect x="6.2500%" y="613" width="0.8621%" height="15" fill="rgb(246,177,23)" fg:x="29" fg:w="4"/><text x="6.5000%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.86%)</title><rect x="6.2500%" y="597" width="0.8621%" height="15" fill="rgb(230,62,27)" fg:x="29" fg:w="4"/><text x="6.5000%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.86%)</title><rect x="6.2500%" y="581" width="0.8621%" height="15" fill="rgb(216,154,8)" fg:x="29" fg:w="4"/><text x="6.5000%" y="591.50"></text></g><g><title>[unknown] (3 samples, 0.65%)</title><rect x="6.4655%" y="565" width="0.6466%" height="15" fill="rgb(244,35,45)" fg:x="30" fg:w="3"/><text x="6.7155%" y="575.50"></text></g><g><title>[unknown] (3 samples, 0.65%)</title><rect x="6.4655%" y="549" width="0.6466%" height="15" fill="rgb(251,115,12)" fg:x="30" fg:w="3"/><text x="6.7155%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.65%)</title><rect x="6.4655%" y="533" width="0.6466%" height="15" fill="rgb(240,54,50)" fg:x="30" fg:w="3"/><text x="6.7155%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.65%)</title><rect x="6.4655%" y="517" width="0.6466%" height="15" fill="rgb(233,84,52)" fg:x="30" fg:w="3"/><text x="6.7155%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.65%)</title><rect x="6.4655%" y="501" width="0.6466%" height="15" fill="rgb(207,117,47)" fg:x="30" fg:w="3"/><text x="6.7155%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="6.6810%" y="485" width="0.4310%" height="15" fill="rgb(249,43,39)" fg:x="31" fg:w="2"/><text x="6.9310%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="6.6810%" y="469" width="0.4310%" height="15" fill="rgb(209,38,44)" fg:x="31" fg:w="2"/><text x="6.9310%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (34 samples, 7.33%)</title><rect x="0.0000%" y="661" width="7.3276%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="34"/><text x="0.2500%" y="671.50">[ld-linux-..</text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1121%" y="645" width="0.2155%" height="15" fill="rgb(242,79,21)" fg:x="33" fg:w="1"/><text x="7.3621%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1121%" y="629" width="0.2155%" height="15" fill="rgb(211,96,35)" fg:x="33" fg:w="1"/><text x="7.3621%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1121%" y="613" width="0.2155%" height="15" fill="rgb(253,215,40)" fg:x="33" fg:w="1"/><text x="7.3621%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1121%" y="597" width="0.2155%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="1"/><text x="7.3621%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1121%" y="581" width="0.2155%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="1"/><text x="7.3621%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1121%" y="565" width="0.2155%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="1"/><text x="7.3621%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="7.1121%" y="549" width="0.2155%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="1"/><text x="7.3621%" y="559.50"></text></g><g><title>[unknown] (5 samples, 1.08%)</title><rect x="7.3276%" y="661" width="1.0776%" height="15" fill="rgb(244,218,35)" fg:x="34" fg:w="5"/><text x="7.5776%" y="671.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="8.1897%" y="645" width="0.2155%" height="15" fill="rgb(240,68,47)" fg:x="38" fg:w="1"/><text x="8.4397%" y="655.50"></text></g><g><title>__do_global_dtors_aux (1 samples, 0.22%)</title><rect x="8.1897%" y="629" width="0.2155%" height="15" fill="rgb(210,16,53)" fg:x="38" fg:w="1"/><text x="8.4397%" y="639.50"></text></g><g><title>_fini (1 samples, 0.22%)</title><rect x="8.4052%" y="661" width="0.2155%" height="15" fill="rgb(235,124,12)" fg:x="39" fg:w="1"/><text x="8.6552%" y="671.50"></text></g><g><title>open64 (1 samples, 0.22%)</title><rect x="8.4052%" y="645" width="0.2155%" height="15" fill="rgb(224,169,11)" fg:x="39" fg:w="1"/><text x="8.6552%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="8.4052%" y="629" width="0.2155%" height="15" fill="rgb(250,166,2)" fg:x="39" fg:w="1"/><text x="8.6552%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.22%)</title><rect x="8.6207%" y="581" width="0.2155%" height="15" fill="rgb(242,216,29)" fg:x="40" fg:w="1"/><text x="8.8707%" y="591.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.22%)</title><rect x="8.6207%" y="565" width="0.2155%" height="15" fill="rgb(230,116,27)" fg:x="40" fg:w="1"/><text x="8.8707%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="8.8362%" y="581" width="0.2155%" height="15" fill="rgb(228,99,48)" fg:x="41" fg:w="1"/><text x="9.0862%" y="591.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="8.8362%" y="565" width="0.2155%" height="15" fill="rgb(253,11,6)" fg:x="41" fg:w="1"/><text x="9.0862%" y="575.50"></text></g><g><title>exit (3 samples, 0.65%)</title><rect x="8.6207%" y="613" width="0.6466%" height="15" fill="rgb(247,143,39)" fg:x="40" fg:w="3"/><text x="8.8707%" y="623.50"></text></g><g><title>[libc.so.6] (3 samples, 0.65%)</title><rect x="8.6207%" y="597" width="0.6466%" height="15" fill="rgb(236,97,10)" fg:x="40" fg:w="3"/><text x="8.8707%" y="607.50"></text></g><g><title>__call_tls_dtors (1 samples, 0.22%)</title><rect x="9.0517%" y="581" width="0.2155%" height="15" fill="rgb(233,208,19)" fg:x="42" fg:w="1"/><text x="9.3017%" y="591.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit::destroy (1 samples, 0.22%)</title><rect x="9.0517%" y="565" width="0.2155%" height="15" fill="rgb(216,164,2)" fg:x="42" fg:w="1"/><text x="9.3017%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.22%)</title><rect x="9.2672%" y="533" width="0.2155%" height="15" fill="rgb(220,129,5)" fg:x="43" fg:w="1"/><text x="9.5172%" y="543.50"></text></g><g><title>std::rt::cleanup (1 samples, 0.22%)</title><rect x="9.2672%" y="517" width="0.2155%" height="15" fill="rgb(242,17,10)" fg:x="43" fg:w="1"/><text x="9.5172%" y="527.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.22%)</title><rect x="9.2672%" y="501" width="0.2155%" height="15" fill="rgb(242,107,0)" fg:x="43" fg:w="1"/><text x="9.5172%" y="511.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.22%)</title><rect x="9.2672%" y="485" width="0.2155%" height="15" fill="rgb(251,28,31)" fg:x="43" fg:w="1"/><text x="9.5172%" y="495.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.22%)</title><rect x="9.2672%" y="469" width="0.2155%" height="15" fill="rgb(233,223,10)" fg:x="43" fg:w="1"/><text x="9.5172%" y="479.50"></text></g><g><title>std::rt::cleanup::{{closure}} (1 samples, 0.22%)</title><rect x="9.2672%" y="453" width="0.2155%" height="15" fill="rgb(215,21,27)" fg:x="43" fg:w="1"/><text x="9.5172%" y="463.50"></text></g><g><title>std::sys::unix::cleanup (1 samples, 0.22%)</title><rect x="9.2672%" y="437" width="0.2155%" height="15" fill="rgb(232,23,21)" fg:x="43" fg:w="1"/><text x="9.5172%" y="447.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::cleanup (1 samples, 0.22%)</title><rect x="9.2672%" y="421" width="0.2155%" height="15" fill="rgb(244,5,23)" fg:x="43" fg:w="1"/><text x="9.5172%" y="431.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.22%)</title><rect x="9.2672%" y="405" width="0.2155%" height="15" fill="rgb(226,81,46)" fg:x="43" fg:w="1"/><text x="9.5172%" y="415.50"></text></g><g><title>sigaltstack (1 samples, 0.22%)</title><rect x="9.2672%" y="389" width="0.2155%" height="15" fill="rgb(247,70,30)" fg:x="43" fg:w="1"/><text x="9.5172%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="9.2672%" y="373" width="0.2155%" height="15" fill="rgb(212,68,19)" fg:x="43" fg:w="1"/><text x="9.5172%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="9.2672%" y="357" width="0.2155%" height="15" fill="rgb(240,187,13)" fg:x="43" fg:w="1"/><text x="9.5172%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="9.2672%" y="341" width="0.2155%" height="15" fill="rgb(223,113,26)" fg:x="43" fg:w="1"/><text x="9.5172%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="9.2672%" y="325" width="0.2155%" height="15" fill="rgb(206,192,2)" fg:x="43" fg:w="1"/><text x="9.5172%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="9.2672%" y="309" width="0.2155%" height="15" fill="rgb(241,108,4)" fg:x="43" fg:w="1"/><text x="9.5172%" y="319.50"></text></g><g><title>[libc.so.6] (8 samples, 1.72%)</title><rect x="10.9914%" y="293" width="1.7241%" height="15" fill="rgb(247,173,49)" fg:x="51" fg:w="8"/><text x="11.2414%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="277" width="0.2155%" height="15" fill="rgb(224,114,35)" fg:x="58" fg:w="1"/><text x="12.7500%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="261" width="0.2155%" height="15" fill="rgb(245,159,27)" fg:x="58" fg:w="1"/><text x="12.7500%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="245" width="0.2155%" height="15" fill="rgb(245,172,44)" fg:x="58" fg:w="1"/><text x="12.7500%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="229" width="0.2155%" height="15" fill="rgb(236,23,11)" fg:x="58" fg:w="1"/><text x="12.7500%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="213" width="0.2155%" height="15" fill="rgb(205,117,38)" fg:x="58" fg:w="1"/><text x="12.7500%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="197" width="0.2155%" height="15" fill="rgb(237,72,25)" fg:x="58" fg:w="1"/><text x="12.7500%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="181" width="0.2155%" height="15" fill="rgb(244,70,9)" fg:x="58" fg:w="1"/><text x="12.7500%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="165" width="0.2155%" height="15" fill="rgb(217,125,39)" fg:x="58" fg:w="1"/><text x="12.7500%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.5000%" y="149" width="0.2155%" height="15" fill="rgb(235,36,10)" fg:x="58" fg:w="1"/><text x="12.7500%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="293" width="0.2155%" height="15" fill="rgb(251,123,47)" fg:x="59" fg:w="1"/><text x="12.9655%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="277" width="0.2155%" height="15" fill="rgb(221,13,13)" fg:x="59" fg:w="1"/><text x="12.9655%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="261" width="0.2155%" height="15" fill="rgb(238,131,9)" fg:x="59" fg:w="1"/><text x="12.9655%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="245" width="0.2155%" height="15" fill="rgb(211,50,8)" fg:x="59" fg:w="1"/><text x="12.9655%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="229" width="0.2155%" height="15" fill="rgb(245,182,24)" fg:x="59" fg:w="1"/><text x="12.9655%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="213" width="0.2155%" height="15" fill="rgb(242,14,37)" fg:x="59" fg:w="1"/><text x="12.9655%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="197" width="0.2155%" height="15" fill="rgb(246,228,12)" fg:x="59" fg:w="1"/><text x="12.9655%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="181" width="0.2155%" height="15" fill="rgb(213,55,15)" fg:x="59" fg:w="1"/><text x="12.9655%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="12.7155%" y="165" width="0.2155%" height="15" fill="rgb(209,9,3)" fg:x="59" fg:w="1"/><text x="12.9655%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (70 samples, 15.09%)</title><rect x="9.4828%" y="389" width="15.0862%" height="15" fill="rgb(230,59,30)" fg:x="44" fg:w="70"/><text x="9.7328%" y="399.50">core::ptr::drop_in_plac..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (70 samples, 15.09%)</title><rect x="9.4828%" y="373" width="15.0862%" height="15" fill="rgb(209,121,21)" fg:x="44" fg:w="70"/><text x="9.7328%" y="383.50">core::ptr::drop_in_plac..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 15.09%)</title><rect x="9.4828%" y="357" width="15.0862%" height="15" fill="rgb(220,109,13)" fg:x="44" fg:w="70"/><text x="9.7328%" y="367.50">&lt;alloc::raw_vec::RawVec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (70 samples, 15.09%)</title><rect x="9.4828%" y="341" width="15.0862%" height="15" fill="rgb(232,18,1)" fg:x="44" fg:w="70"/><text x="9.7328%" y="351.50">&lt;alloc::alloc::Global a..</text></g><g><title>alloc::alloc::dealloc (70 samples, 15.09%)</title><rect x="9.4828%" y="325" width="15.0862%" height="15" fill="rgb(215,41,42)" fg:x="44" fg:w="70"/><text x="9.7328%" y="335.50">alloc::alloc::dealloc</text></g><g><title>cfree (70 samples, 15.09%)</title><rect x="9.4828%" y="309" width="15.0862%" height="15" fill="rgb(224,123,36)" fg:x="44" fg:w="70"/><text x="9.7328%" y="319.50">cfree</text></g><g><title>__munmap (54 samples, 11.64%)</title><rect x="12.9310%" y="293" width="11.6379%" height="15" fill="rgb(240,125,3)" fg:x="60" fg:w="54"/><text x="13.1810%" y="303.50">__munmap</text></g><g><title>[unknown] (54 samples, 11.64%)</title><rect x="12.9310%" y="277" width="11.6379%" height="15" fill="rgb(205,98,50)" fg:x="60" fg:w="54"/><text x="13.1810%" y="287.50">[unknown]</text></g><g><title>[unknown] (54 samples, 11.64%)</title><rect x="12.9310%" y="261" width="11.6379%" height="15" fill="rgb(205,185,37)" fg:x="60" fg:w="54"/><text x="13.1810%" y="271.50">[unknown]</text></g><g><title>[unknown] (54 samples, 11.64%)</title><rect x="12.9310%" y="245" width="11.6379%" height="15" fill="rgb(238,207,15)" fg:x="60" fg:w="54"/><text x="13.1810%" y="255.50">[unknown]</text></g><g><title>[unknown] (50 samples, 10.78%)</title><rect x="13.7931%" y="229" width="10.7759%" height="15" fill="rgb(213,199,42)" fg:x="64" fg:w="50"/><text x="14.0431%" y="239.50">[unknown]</text></g><g><title>[unknown] (43 samples, 9.27%)</title><rect x="15.3017%" y="213" width="9.2672%" height="15" fill="rgb(235,201,11)" fg:x="71" fg:w="43"/><text x="15.5517%" y="223.50">[unknown]</text></g><g><title>[unknown] (34 samples, 7.33%)</title><rect x="17.2414%" y="197" width="7.3276%" height="15" fill="rgb(207,46,11)" fg:x="80" fg:w="34"/><text x="17.4914%" y="207.50">[unknown]</text></g><g><title>[unknown] (29 samples, 6.25%)</title><rect x="18.3190%" y="181" width="6.2500%" height="15" fill="rgb(241,35,35)" fg:x="85" fg:w="29"/><text x="18.5690%" y="191.50">[unknown]</text></g><g><title>[unknown] (18 samples, 3.88%)</title><rect x="20.6897%" y="165" width="3.8793%" height="15" fill="rgb(243,32,47)" fg:x="96" fg:w="18"/><text x="20.9397%" y="175.50">[unk..</text></g><g><title>[unknown] (7 samples, 1.51%)</title><rect x="23.0603%" y="149" width="1.5086%" height="15" fill="rgb(247,202,23)" fg:x="107" fg:w="7"/><text x="23.3103%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="24.1379%" y="133" width="0.4310%" height="15" fill="rgb(219,102,11)" fg:x="112" fg:w="2"/><text x="24.3879%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="24.3534%" y="117" width="0.2155%" height="15" fill="rgb(243,110,44)" fg:x="113" fg:w="1"/><text x="24.6034%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="24.3534%" y="101" width="0.2155%" height="15" fill="rgb(222,74,54)" fg:x="113" fg:w="1"/><text x="24.6034%" y="111.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (100 samples, 21.55%)</title><rect x="24.5690%" y="373" width="21.5517%" height="15" fill="rgb(216,99,12)" fg:x="114" fg:w="100"/><text x="24.8190%" y="383.50">&lt;std::fs::File as std::io::Read&gt;::..</text></g><g><title>std::sys::unix::fs::File::read (81 samples, 17.46%)</title><rect x="28.6638%" y="357" width="17.4569%" height="15" fill="rgb(226,22,26)" fg:x="133" fg:w="81"/><text x="28.9138%" y="367.50">std::sys::unix::fs::File::r..</text></g><g><title>std::sys::unix::fd::FileDesc::read (81 samples, 17.46%)</title><rect x="28.6638%" y="341" width="17.4569%" height="15" fill="rgb(217,163,10)" fg:x="133" fg:w="81"/><text x="28.9138%" y="351.50">std::sys::unix::fd::FileDes..</text></g><g><title>read (81 samples, 17.46%)</title><rect x="28.6638%" y="325" width="17.4569%" height="15" fill="rgb(213,25,53)" fg:x="133" fg:w="81"/><text x="28.9138%" y="335.50">read</text></g><g><title>[unknown] (68 samples, 14.66%)</title><rect x="31.4655%" y="309" width="14.6552%" height="15" fill="rgb(252,105,26)" fg:x="146" fg:w="68"/><text x="31.7155%" y="319.50">[unknown]</text></g><g><title>[unknown] (67 samples, 14.44%)</title><rect x="31.6810%" y="293" width="14.4397%" height="15" fill="rgb(220,39,43)" fg:x="147" fg:w="67"/><text x="31.9310%" y="303.50">[unknown]</text></g><g><title>[unknown] (67 samples, 14.44%)</title><rect x="31.6810%" y="277" width="14.4397%" height="15" fill="rgb(229,68,48)" fg:x="147" fg:w="67"/><text x="31.9310%" y="287.50">[unknown]</text></g><g><title>[unknown] (62 samples, 13.36%)</title><rect x="32.7586%" y="261" width="13.3621%" height="15" fill="rgb(252,8,32)" fg:x="152" fg:w="62"/><text x="33.0086%" y="271.50">[unknown]</text></g><g><title>[unknown] (47 samples, 10.13%)</title><rect x="35.9914%" y="245" width="10.1293%" height="15" fill="rgb(223,20,43)" fg:x="167" fg:w="47"/><text x="36.2414%" y="255.50">[unknown]</text></g><g><title>[unknown] (20 samples, 4.31%)</title><rect x="41.8103%" y="229" width="4.3103%" height="15" fill="rgb(229,81,49)" fg:x="194" fg:w="20"/><text x="42.0603%" y="239.50">[unkn..</text></g><g><title>[unknown] (20 samples, 4.31%)</title><rect x="41.8103%" y="213" width="4.3103%" height="15" fill="rgb(236,28,36)" fg:x="194" fg:w="20"/><text x="42.0603%" y="223.50">[unkn..</text></g><g><title>[unknown] (6 samples, 1.29%)</title><rect x="44.8276%" y="197" width="1.2931%" height="15" fill="rgb(249,185,26)" fg:x="208" fg:w="6"/><text x="45.0776%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.86%)</title><rect x="45.2586%" y="181" width="0.8621%" height="15" fill="rgb(249,174,33)" fg:x="210" fg:w="4"/><text x="45.5086%" y="191.50"></text></g><g><title>[unknown] (14 samples, 3.02%)</title><rect x="50.0000%" y="197" width="3.0172%" height="15" fill="rgb(233,201,37)" fg:x="232" fg:w="14"/><text x="50.2500%" y="207.50">[un..</text></g><g><title>[unknown] (14 samples, 3.02%)</title><rect x="50.0000%" y="181" width="3.0172%" height="15" fill="rgb(221,78,26)" fg:x="232" fg:w="14"/><text x="50.2500%" y="191.50">[un..</text></g><g><title>[unknown] (14 samples, 3.02%)</title><rect x="50.0000%" y="165" width="3.0172%" height="15" fill="rgb(250,127,30)" fg:x="232" fg:w="14"/><text x="50.2500%" y="175.50">[un..</text></g><g><title>[unknown] (14 samples, 3.02%)</title><rect x="50.0000%" y="149" width="3.0172%" height="15" fill="rgb(230,49,44)" fg:x="232" fg:w="14"/><text x="50.2500%" y="159.50">[un..</text></g><g><title>[unknown] (14 samples, 3.02%)</title><rect x="50.0000%" y="133" width="3.0172%" height="15" fill="rgb(229,67,23)" fg:x="232" fg:w="14"/><text x="50.2500%" y="143.50">[un..</text></g><g><title>[unknown] (14 samples, 3.02%)</title><rect x="50.0000%" y="117" width="3.0172%" height="15" fill="rgb(249,83,47)" fg:x="232" fg:w="14"/><text x="50.2500%" y="127.50">[un..</text></g><g><title>[unknown] (12 samples, 2.59%)</title><rect x="50.4310%" y="101" width="2.5862%" height="15" fill="rgb(215,43,3)" fg:x="234" fg:w="12"/><text x="50.6810%" y="111.50">[u..</text></g><g><title>[unknown] (12 samples, 2.59%)</title><rect x="50.4310%" y="85" width="2.5862%" height="15" fill="rgb(238,154,13)" fg:x="234" fg:w="12"/><text x="50.6810%" y="95.50">[u..</text></g><g><title>[unknown] (10 samples, 2.16%)</title><rect x="50.8621%" y="69" width="2.1552%" height="15" fill="rgb(219,56,2)" fg:x="236" fg:w="10"/><text x="51.1121%" y="79.50">[..</text></g><g><title>[unknown] (9 samples, 1.94%)</title><rect x="51.0776%" y="53" width="1.9397%" height="15" fill="rgb(233,0,4)" fg:x="237" fg:w="9"/><text x="51.3276%" y="63.50">[..</text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="52.8017%" y="37" width="0.2155%" height="15" fill="rgb(235,30,7)" fg:x="245" fg:w="1"/><text x="53.0517%" y="47.50"></text></g><g><title>malloc (83 samples, 17.89%)</title><rect x="46.1207%" y="261" width="17.8879%" height="15" fill="rgb(250,79,13)" fg:x="214" fg:w="83"/><text x="46.3707%" y="271.50">malloc</text></g><g><title>[libc.so.6] (82 samples, 17.67%)</title><rect x="46.3362%" y="245" width="17.6724%" height="15" fill="rgb(211,146,34)" fg:x="215" fg:w="82"/><text x="46.5862%" y="255.50">[libc.so.6]</text></g><g><title>[libc.so.6] (71 samples, 15.30%)</title><rect x="48.7069%" y="229" width="15.3017%" height="15" fill="rgb(228,22,38)" fg:x="226" fg:w="71"/><text x="48.9569%" y="239.50">[libc.so.6]</text></g><g><title>[libc.so.6] (69 samples, 14.87%)</title><rect x="49.1379%" y="213" width="14.8707%" height="15" fill="rgb(235,168,5)" fg:x="228" fg:w="69"/><text x="49.3879%" y="223.50">[libc.so.6]</text></g><g><title>__mmap (51 samples, 10.99%)</title><rect x="53.0172%" y="197" width="10.9914%" height="15" fill="rgb(221,155,16)" fg:x="246" fg:w="51"/><text x="53.2672%" y="207.50">__mmap</text></g><g><title>[unknown] (47 samples, 10.13%)</title><rect x="53.8793%" y="181" width="10.1293%" height="15" fill="rgb(215,215,53)" fg:x="250" fg:w="47"/><text x="54.1293%" y="191.50">[unknown]</text></g><g><title>[unknown] (47 samples, 10.13%)</title><rect x="53.8793%" y="165" width="10.1293%" height="15" fill="rgb(223,4,10)" fg:x="250" fg:w="47"/><text x="54.1293%" y="175.50">[unknown]</text></g><g><title>[unknown] (47 samples, 10.13%)</title><rect x="53.8793%" y="149" width="10.1293%" height="15" fill="rgb(234,103,6)" fg:x="250" fg:w="47"/><text x="54.1293%" y="159.50">[unknown]</text></g><g><title>[unknown] (27 samples, 5.82%)</title><rect x="58.1897%" y="133" width="5.8190%" height="15" fill="rgb(227,97,0)" fg:x="270" fg:w="27"/><text x="58.4397%" y="143.50">[unknow..</text></g><g><title>[unknown] (8 samples, 1.72%)</title><rect x="62.2845%" y="117" width="1.7241%" height="15" fill="rgb(234,150,53)" fg:x="289" fg:w="8"/><text x="62.5345%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="63.7931%" y="101" width="0.2155%" height="15" fill="rgb(228,201,54)" fg:x="296" fg:w="1"/><text x="64.0431%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (84 samples, 18.10%)</title><rect x="46.1207%" y="373" width="18.1034%" height="15" fill="rgb(222,22,37)" fg:x="214" fg:w="84"/><text x="46.3707%" y="383.50">alloc::vec::Vec&lt;T&gt;::with_cap..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (84 samples, 18.10%)</title><rect x="46.1207%" y="357" width="18.1034%" height="15" fill="rgb(237,53,32)" fg:x="214" fg:w="84"/><text x="46.3707%" y="367.50">alloc::vec::Vec&lt;T,A&gt;::with_c..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (84 samples, 18.10%)</title><rect x="46.1207%" y="341" width="18.1034%" height="15" fill="rgb(233,25,53)" fg:x="214" fg:w="84"/><text x="46.3707%" y="351.50">alloc::raw_vec::RawVec&lt;T,A&gt;:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (84 samples, 18.10%)</title><rect x="46.1207%" y="325" width="18.1034%" height="15" fill="rgb(210,40,34)" fg:x="214" fg:w="84"/><text x="46.3707%" y="335.50">alloc::raw_vec::RawVec&lt;T,A&gt;:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 18.10%)</title><rect x="46.1207%" y="309" width="18.1034%" height="15" fill="rgb(241,220,44)" fg:x="214" fg:w="84"/><text x="46.3707%" y="319.50">&lt;alloc::alloc::Global as cor..</text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 18.10%)</title><rect x="46.1207%" y="293" width="18.1034%" height="15" fill="rgb(235,28,35)" fg:x="214" fg:w="84"/><text x="46.3707%" y="303.50">alloc::alloc::Global::alloc_..</text></g><g><title>alloc::alloc::alloc (84 samples, 18.10%)</title><rect x="46.1207%" y="277" width="18.1034%" height="15" fill="rgb(210,56,17)" fg:x="214" fg:w="84"/><text x="46.3707%" y="287.50">alloc::alloc::alloc</text></g><g><title>std::fs::File::metadata (1 samples, 0.22%)</title><rect x="64.0086%" y="261" width="0.2155%" height="15" fill="rgb(224,130,29)" fg:x="297" fg:w="1"/><text x="64.2586%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.22%)</title><rect x="64.0086%" y="245" width="0.2155%" height="15" fill="rgb(235,212,8)" fg:x="297" fg:w="1"/><text x="64.2586%" y="255.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.22%)</title><rect x="64.0086%" y="229" width="0.2155%" height="15" fill="rgb(223,33,50)" fg:x="297" fg:w="1"/><text x="64.2586%" y="239.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.22%)</title><rect x="64.0086%" y="213" width="0.2155%" height="15" fill="rgb(219,149,13)" fg:x="297" fg:w="1"/><text x="64.2586%" y="223.50"></text></g><g><title>statx (1 samples, 0.22%)</title><rect x="64.0086%" y="197" width="0.2155%" height="15" fill="rgb(250,156,29)" fg:x="297" fg:w="1"/><text x="64.2586%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="64.0086%" y="181" width="0.2155%" height="15" fill="rgb(216,193,19)" fg:x="297" fg:w="1"/><text x="64.2586%" y="191.50"></text></g><g><title>core::mem::drop (21 samples, 4.53%)</title><rect x="64.2241%" y="373" width="4.5259%" height="15" fill="rgb(216,135,14)" fg:x="298" fg:w="21"/><text x="64.4741%" y="383.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::fs::File&gt; (21 samples, 4.53%)</title><rect x="64.2241%" y="357" width="4.5259%" height="15" fill="rgb(241,47,5)" fg:x="298" fg:w="21"/><text x="64.4741%" y="367.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fs::File&gt; (21 samples, 4.53%)</title><rect x="64.2241%" y="341" width="4.5259%" height="15" fill="rgb(233,42,35)" fg:x="298" fg:w="21"/><text x="64.4741%" y="351.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (21 samples, 4.53%)</title><rect x="64.2241%" y="325" width="4.5259%" height="15" fill="rgb(231,13,6)" fg:x="298" fg:w="21"/><text x="64.4741%" y="335.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (21 samples, 4.53%)</title><rect x="64.2241%" y="309" width="4.5259%" height="15" fill="rgb(207,181,40)" fg:x="298" fg:w="21"/><text x="64.4741%" y="319.50">core:..</text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (21 samples, 4.53%)</title><rect x="64.2241%" y="293" width="4.5259%" height="15" fill="rgb(254,173,49)" fg:x="298" fg:w="21"/><text x="64.4741%" y="303.50">&lt;std:..</text></g><g><title>__close (21 samples, 4.53%)</title><rect x="64.2241%" y="277" width="4.5259%" height="15" fill="rgb(221,1,38)" fg:x="298" fg:w="21"/><text x="64.4741%" y="287.50">__clo..</text></g><g><title>[unknown] (21 samples, 4.53%)</title><rect x="64.2241%" y="261" width="4.5259%" height="15" fill="rgb(206,124,46)" fg:x="298" fg:w="21"/><text x="64.4741%" y="271.50">[unkn..</text></g><g><title>[unknown] (21 samples, 4.53%)</title><rect x="64.2241%" y="245" width="4.5259%" height="15" fill="rgb(249,21,11)" fg:x="298" fg:w="21"/><text x="64.4741%" y="255.50">[unkn..</text></g><g><title>[unknown] (21 samples, 4.53%)</title><rect x="64.2241%" y="229" width="4.5259%" height="15" fill="rgb(222,201,40)" fg:x="298" fg:w="21"/><text x="64.4741%" y="239.50">[unkn..</text></g><g><title>[unknown] (21 samples, 4.53%)</title><rect x="64.2241%" y="213" width="4.5259%" height="15" fill="rgb(235,61,29)" fg:x="298" fg:w="21"/><text x="64.4741%" y="223.50">[unkn..</text></g><g><title>[unknown] (20 samples, 4.31%)</title><rect x="64.4397%" y="197" width="4.3103%" height="15" fill="rgb(219,207,3)" fg:x="299" fg:w="20"/><text x="64.6897%" y="207.50">[unkn..</text></g><g><title>[unknown] (9 samples, 1.94%)</title><rect x="66.8103%" y="181" width="1.9397%" height="15" fill="rgb(222,56,46)" fg:x="310" fg:w="9"/><text x="67.0603%" y="191.50">[..</text></g><g><title>[unknown] (3 samples, 0.65%)</title><rect x="68.1034%" y="165" width="0.6466%" height="15" fill="rgb(239,76,54)" fg:x="316" fg:w="3"/><text x="68.3534%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="68.5345%" y="149" width="0.2155%" height="15" fill="rgb(231,124,27)" fg:x="318" fg:w="1"/><text x="68.7845%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (5 samples, 1.08%)</title><rect x="68.7500%" y="373" width="1.0776%" height="15" fill="rgb(249,195,6)" fg:x="319" fg:w="5"/><text x="69.0000%" y="383.50"></text></g><g><title>std::fs::File::metadata (25 samples, 5.39%)</title><rect x="69.8276%" y="373" width="5.3879%" height="15" fill="rgb(237,174,47)" fg:x="324" fg:w="25"/><text x="70.0776%" y="383.50">std::fs..</text></g><g><title>std::sys::unix::fs::File::file_attr (25 samples, 5.39%)</title><rect x="69.8276%" y="357" width="5.3879%" height="15" fill="rgb(206,201,31)" fg:x="324" fg:w="25"/><text x="70.0776%" y="367.50">std::sy..</text></g><g><title>std::sys::unix::fs::try_statx (25 samples, 5.39%)</title><rect x="69.8276%" y="341" width="5.3879%" height="15" fill="rgb(231,57,52)" fg:x="324" fg:w="25"/><text x="70.0776%" y="351.50">std::sy..</text></g><g><title>std::sys::unix::fs::try_statx::statx (25 samples, 5.39%)</title><rect x="69.8276%" y="325" width="5.3879%" height="15" fill="rgb(248,177,22)" fg:x="324" fg:w="25"/><text x="70.0776%" y="335.50">std::sy..</text></g><g><title>statx (25 samples, 5.39%)</title><rect x="69.8276%" y="309" width="5.3879%" height="15" fill="rgb(215,211,37)" fg:x="324" fg:w="25"/><text x="70.0776%" y="319.50">statx</text></g><g><title>[unknown] (25 samples, 5.39%)</title><rect x="69.8276%" y="293" width="5.3879%" height="15" fill="rgb(241,128,51)" fg:x="324" fg:w="25"/><text x="70.0776%" y="303.50">[unknow..</text></g><g><title>[unknown] (25 samples, 5.39%)</title><rect x="69.8276%" y="277" width="5.3879%" height="15" fill="rgb(227,165,31)" fg:x="324" fg:w="25"/><text x="70.0776%" y="287.50">[unknow..</text></g><g><title>[unknown] (25 samples, 5.39%)</title><rect x="69.8276%" y="261" width="5.3879%" height="15" fill="rgb(228,167,24)" fg:x="324" fg:w="25"/><text x="70.0776%" y="271.50">[unknow..</text></g><g><title>[unknown] (25 samples, 5.39%)</title><rect x="69.8276%" y="245" width="5.3879%" height="15" fill="rgb(228,143,12)" fg:x="324" fg:w="25"/><text x="70.0776%" y="255.50">[unknow..</text></g><g><title>[unknown] (19 samples, 4.09%)</title><rect x="71.1207%" y="229" width="4.0948%" height="15" fill="rgb(249,149,8)" fg:x="330" fg:w="19"/><text x="71.3707%" y="239.50">[unk..</text></g><g><title>[unknown] (13 samples, 2.80%)</title><rect x="72.4138%" y="213" width="2.8017%" height="15" fill="rgb(243,35,44)" fg:x="336" fg:w="13"/><text x="72.6638%" y="223.50">[u..</text></g><g><title>[unknown] (10 samples, 2.16%)</title><rect x="73.0603%" y="197" width="2.1552%" height="15" fill="rgb(246,89,9)" fg:x="339" fg:w="10"/><text x="73.3103%" y="207.50">[..</text></g><g><title>[unknown] (6 samples, 1.29%)</title><rect x="73.9224%" y="181" width="1.2931%" height="15" fill="rgb(233,213,13)" fg:x="343" fg:w="6"/><text x="74.1724%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="74.7845%" y="165" width="0.4310%" height="15" fill="rgb(233,141,41)" fg:x="347" fg:w="2"/><text x="75.0345%" y="175.50"></text></g><g><title>std::fs::OpenOptions::new (1 samples, 0.22%)</title><rect x="75.2155%" y="357" width="0.2155%" height="15" fill="rgb(239,167,4)" fg:x="349" fg:w="1"/><text x="75.4655%" y="367.50"></text></g><g><title>std::sys::unix::fs::OpenOptions::new (1 samples, 0.22%)</title><rect x="75.2155%" y="341" width="0.2155%" height="15" fill="rgb(209,217,16)" fg:x="349" fg:w="1"/><text x="75.4655%" y="351.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (5 samples, 1.08%)</title><rect x="75.4310%" y="277" width="1.0776%" height="15" fill="rgb(219,88,35)" fg:x="350" fg:w="5"/><text x="75.6810%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.65%)</title><rect x="75.8621%" y="261" width="0.6466%" height="15" fill="rgb(220,193,23)" fg:x="352" fg:w="3"/><text x="76.1121%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_naive (2 samples, 0.43%)</title><rect x="76.0776%" y="245" width="0.4310%" height="15" fill="rgb(230,90,52)" fg:x="353" fg:w="2"/><text x="76.3276%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 4.74%)</title><rect x="76.5086%" y="277" width="4.7414%" height="15" fill="rgb(252,106,19)" fg:x="355" fg:w="22"/><text x="76.7586%" y="287.50">core::..</text></g><g><title>[libc.so.6] (22 samples, 4.74%)</title><rect x="76.5086%" y="261" width="4.7414%" height="15" fill="rgb(206,74,20)" fg:x="355" fg:w="22"/><text x="76.7586%" y="271.50">[libc...</text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="245" width="0.2155%" height="15" fill="rgb(230,138,44)" fg:x="376" fg:w="1"/><text x="81.2845%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="229" width="0.2155%" height="15" fill="rgb(235,182,43)" fg:x="376" fg:w="1"/><text x="81.2845%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="213" width="0.2155%" height="15" fill="rgb(242,16,51)" fg:x="376" fg:w="1"/><text x="81.2845%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="197" width="0.2155%" height="15" fill="rgb(248,9,4)" fg:x="376" fg:w="1"/><text x="81.2845%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="181" width="0.2155%" height="15" fill="rgb(210,31,22)" fg:x="376" fg:w="1"/><text x="81.2845%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="165" width="0.2155%" height="15" fill="rgb(239,54,39)" fg:x="376" fg:w="1"/><text x="81.2845%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="149" width="0.2155%" height="15" fill="rgb(230,99,41)" fg:x="376" fg:w="1"/><text x="81.2845%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="133" width="0.2155%" height="15" fill="rgb(253,106,12)" fg:x="376" fg:w="1"/><text x="81.2845%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="117" width="0.2155%" height="15" fill="rgb(213,46,41)" fg:x="376" fg:w="1"/><text x="81.2845%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="81.0345%" y="101" width="0.2155%" height="15" fill="rgb(215,133,35)" fg:x="376" fg:w="1"/><text x="81.2845%" y="111.50"></text></g><g><title>std::fs::OpenOptions::open (110 samples, 23.71%)</title><rect x="75.4310%" y="357" width="23.7069%" height="15" fill="rgb(213,28,5)" fg:x="350" fg:w="110"/><text x="75.6810%" y="367.50">std::fs::OpenOptions::open</text></g><g><title>std::fs::OpenOptions::_open (110 samples, 23.71%)</title><rect x="75.4310%" y="341" width="23.7069%" height="15" fill="rgb(215,77,49)" fg:x="350" fg:w="110"/><text x="75.6810%" y="351.50">std::fs::OpenOptions::_open</text></g><g><title>std::sys::unix::fs::File::open (110 samples, 23.71%)</title><rect x="75.4310%" y="325" width="23.7069%" height="15" fill="rgb(248,100,22)" fg:x="350" fg:w="110"/><text x="75.6810%" y="335.50">std::sys::unix::fs::File::open</text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (110 samples, 23.71%)</title><rect x="75.4310%" y="309" width="23.7069%" height="15" fill="rgb(208,67,9)" fg:x="350" fg:w="110"/><text x="75.6810%" y="319.50">std::sys::common::small_c_string::run_..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (110 samples, 23.71%)</title><rect x="75.4310%" y="293" width="23.7069%" height="15" fill="rgb(219,133,21)" fg:x="350" fg:w="110"/><text x="75.6810%" y="303.50">std::sys::common::small_c_string::run_..</text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (83 samples, 17.89%)</title><rect x="81.2500%" y="277" width="17.8879%" height="15" fill="rgb(246,46,29)" fg:x="377" fg:w="83"/><text x="81.5000%" y="287.50">std::sys::unix::fs::File::op..</text></g><g><title>std::sys::unix::fs::File::open_c (83 samples, 17.89%)</title><rect x="81.2500%" y="261" width="17.8879%" height="15" fill="rgb(246,185,52)" fg:x="377" fg:w="83"/><text x="81.5000%" y="271.50">std::sys::unix::fs::File::op..</text></g><g><title>std::sys::unix::cvt_r (73 samples, 15.73%)</title><rect x="83.4052%" y="245" width="15.7328%" height="15" fill="rgb(252,136,11)" fg:x="387" fg:w="73"/><text x="83.6552%" y="255.50">std::sys::unix::cvt_r</text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (73 samples, 15.73%)</title><rect x="83.4052%" y="229" width="15.7328%" height="15" fill="rgb(219,138,53)" fg:x="387" fg:w="73"/><text x="83.6552%" y="239.50">std::sys::unix::fs::File..</text></g><g><title>open64 (73 samples, 15.73%)</title><rect x="83.4052%" y="213" width="15.7328%" height="15" fill="rgb(211,51,23)" fg:x="387" fg:w="73"/><text x="83.6552%" y="223.50">open64</text></g><g><title>[unknown] (58 samples, 12.50%)</title><rect x="86.6379%" y="197" width="12.5000%" height="15" fill="rgb(247,221,28)" fg:x="402" fg:w="58"/><text x="86.8879%" y="207.50">[unknown]</text></g><g><title>[unknown] (58 samples, 12.50%)</title><rect x="86.6379%" y="181" width="12.5000%" height="15" fill="rgb(251,222,45)" fg:x="402" fg:w="58"/><text x="86.8879%" y="191.50">[unknown]</text></g><g><title>[unknown] (54 samples, 11.64%)</title><rect x="87.5000%" y="165" width="11.6379%" height="15" fill="rgb(217,162,53)" fg:x="406" fg:w="54"/><text x="87.7500%" y="175.50">[unknown]</text></g><g><title>[unknown] (50 samples, 10.78%)</title><rect x="88.3621%" y="149" width="10.7759%" height="15" fill="rgb(229,93,14)" fg:x="410" fg:w="50"/><text x="88.6121%" y="159.50">[unknown]</text></g><g><title>[unknown] (43 samples, 9.27%)</title><rect x="89.8707%" y="133" width="9.2672%" height="15" fill="rgb(209,67,49)" fg:x="417" fg:w="43"/><text x="90.1207%" y="143.50">[unknown]</text></g><g><title>[unknown] (19 samples, 4.09%)</title><rect x="95.0431%" y="117" width="4.0948%" height="15" fill="rgb(213,87,29)" fg:x="441" fg:w="19"/><text x="95.2931%" y="127.50">[unk..</text></g><g><title>[unknown] (2 samples, 0.43%)</title><rect x="98.7069%" y="101" width="0.4310%" height="15" fill="rgb(205,151,52)" fg:x="458" fg:w="2"/><text x="98.9569%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="98.9224%" y="85" width="0.2155%" height="15" fill="rgb(253,215,39)" fg:x="459" fg:w="1"/><text x="99.1724%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="98.9224%" y="69" width="0.2155%" height="15" fill="rgb(221,220,41)" fg:x="459" fg:w="1"/><text x="99.1724%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.22%)</title><rect x="98.9224%" y="53" width="0.2155%" height="15" fill="rgb(218,133,21)" fg:x="459" fg:w="1"/><text x="99.1724%" y="63.50"></text></g><g><title>std::panic::catch_unwind (419 samples, 90.30%)</title><rect x="9.4828%" y="517" width="90.3017%" height="15" fill="rgb(221,193,43)" fg:x="44" fg:w="419"/><text x="9.7328%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (419 samples, 90.30%)</title><rect x="9.4828%" y="501" width="90.3017%" height="15" fill="rgb(240,128,52)" fg:x="44" fg:w="419"/><text x="9.7328%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (419 samples, 90.30%)</title><rect x="9.4828%" y="485" width="90.3017%" height="15" fill="rgb(253,114,12)" fg:x="44" fg:w="419"/><text x="9.7328%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (419 samples, 90.30%)</title><rect x="9.4828%" y="469" width="90.3017%" height="15" fill="rgb(215,223,47)" fg:x="44" fg:w="419"/><text x="9.7328%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (419 samples, 90.30%)</title><rect x="9.4828%" y="453" width="90.3017%" height="15" fill="rgb(248,225,23)" fg:x="44" fg:w="419"/><text x="9.7328%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (419 samples, 90.30%)</title><rect x="9.4828%" y="437" width="90.3017%" height="15" fill="rgb(250,108,0)" fg:x="44" fg:w="419"/><text x="9.7328%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (419 samples, 90.30%)</title><rect x="9.4828%" y="421" width="90.3017%" height="15" fill="rgb(228,208,7)" fg:x="44" fg:w="419"/><text x="9.7328%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>read_slow::main (419 samples, 90.30%)</title><rect x="9.4828%" y="405" width="90.3017%" height="15" fill="rgb(244,45,10)" fg:x="44" fg:w="419"/><text x="9.7328%" y="415.50">read_slow::main</text></g><g><title>read_slow::std_read (349 samples, 75.22%)</title><rect x="24.5690%" y="389" width="75.2155%" height="15" fill="rgb(207,125,25)" fg:x="114" fg:w="349"/><text x="24.8190%" y="399.50">read_slow::std_read</text></g><g><title>std::fs::File::open (114 samples, 24.57%)</title><rect x="75.2155%" y="373" width="24.5690%" height="15" fill="rgb(210,195,18)" fg:x="349" fg:w="114"/><text x="75.4655%" y="383.50">std::fs::File::open</text></g><g><title>std::fs::OpenOptions::read (3 samples, 0.65%)</title><rect x="99.1379%" y="357" width="0.6466%" height="15" fill="rgb(249,80,12)" fg:x="460" fg:w="3"/><text x="99.3879%" y="367.50"></text></g><g><title>all (464 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="464"/><text x="0.2500%" y="703.50"></text></g><g><title>read_slow (464 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="464"/><text x="0.2500%" y="687.50">read_slow</text></g><g><title>_start (424 samples, 91.38%)</title><rect x="8.6207%" y="661" width="91.3793%" height="15" fill="rgb(225,32,20)" fg:x="40" fg:w="424"/><text x="8.8707%" y="671.50">_start</text></g><g><title>__libc_start_main (424 samples, 91.38%)</title><rect x="8.6207%" y="645" width="91.3793%" height="15" fill="rgb(215,141,46)" fg:x="40" fg:w="424"/><text x="8.8707%" y="655.50">__libc_start_main</text></g><g><title>[libc.so.6] (424 samples, 91.38%)</title><rect x="8.6207%" y="629" width="91.3793%" height="15" fill="rgb(250,160,47)" fg:x="40" fg:w="424"/><text x="8.8707%" y="639.50">[libc.so.6]</text></g><g><title>main (421 samples, 90.73%)</title><rect x="9.2672%" y="613" width="90.7328%" height="15" fill="rgb(216,222,40)" fg:x="43" fg:w="421"/><text x="9.5172%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (421 samples, 90.73%)</title><rect x="9.2672%" y="597" width="90.7328%" height="15" fill="rgb(234,217,39)" fg:x="43" fg:w="421"/><text x="9.5172%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (421 samples, 90.73%)</title><rect x="9.2672%" y="581" width="90.7328%" height="15" fill="rgb(207,178,40)" fg:x="43" fg:w="421"/><text x="9.5172%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (421 samples, 90.73%)</title><rect x="9.2672%" y="565" width="90.7328%" height="15" fill="rgb(221,136,13)" fg:x="43" fg:w="421"/><text x="9.5172%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (421 samples, 90.73%)</title><rect x="9.2672%" y="549" width="90.7328%" height="15" fill="rgb(249,199,10)" fg:x="43" fg:w="421"/><text x="9.5172%" y="559.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (420 samples, 90.52%)</title><rect x="9.4828%" y="533" width="90.5172%" height="15" fill="rgb(249,222,13)" fg:x="44" fg:w="420"/><text x="9.7328%" y="543.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.22%)</title><rect x="99.7845%" y="517" width="0.2155%" height="15" fill="rgb(244,185,38)" fg:x="463" fg:w="1"/><text x="100.0345%" y="527.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.22%)</title><rect x="99.7845%" y="501" width="0.2155%" height="15" fill="rgb(236,202,9)" fg:x="463" fg:w="1"/><text x="100.0345%" y="511.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.22%)</title><rect x="99.7845%" y="485" width="0.2155%" height="15" fill="rgb(250,229,37)" fg:x="463" fg:w="1"/><text x="100.0345%" y="495.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.22%)</title><rect x="99.7845%" y="469" width="0.2155%" height="15" fill="rgb(206,174,23)" fg:x="463" fg:w="1"/><text x="100.0345%" y="479.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.22%)</title><rect x="99.7845%" y="453" width="0.2155%" height="15" fill="rgb(211,33,43)" fg:x="463" fg:w="1"/><text x="100.0345%" y="463.50"></text></g><g><title>__isoc99_sscanf (1 samples, 0.22%)</title><rect x="99.7845%" y="437" width="0.2155%" height="15" fill="rgb(245,58,50)" fg:x="463" fg:w="1"/><text x="100.0345%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="99.7845%" y="421" width="0.2155%" height="15" fill="rgb(244,68,36)" fg:x="463" fg:w="1"/><text x="100.0345%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.22%)</title><rect x="99.7845%" y="405" width="0.2155%" height="15" fill="rgb(232,229,15)" fg:x="463" fg:w="1"/><text x="100.0345%" y="415.50"></text></g></svg></svg>